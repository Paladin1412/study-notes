三个主要应用场景
- 静态资源
- 反向代理服务
- API服务
一个请求进来，访问到nginx，可以直接返回文件，也可以通过nginx访问应用服务器。也可以充当api接口服务。
Lua是nginx编程语言

nginx优势
高并发高性能
可扩展性好，轻量级，采用的是多进程(单线程，多路复用IO)
高可靠性
热部署
开原许可

多进程/单线程
一个进程最少有一个线程，进程象征车间，工人象征线程

工作流程:
1. Nginx在启动后，会有一个master进程和多个相互独立的worker进程。
2. 接收来自外界的信号，向各worker进程发送信号，每个进程都有可能来处理这个链接。
3. master进程能监控worker进程的运行状态，当worker进程异常退出后，会自动启动新的worker进程。
worker进程数，一般会设置成机器cpu核数，因为更多的worker数，只会导致进程相互竞争cpu，从而带来不必要的上下文切换。
使用多进程模式，不仅能提高并发率，而且进程之间相互独立，一个worker进程挂了不会影响到其他worker进程
IO多路复用
多个文件描述符的IO操作都能在一个线程里并发交替顺序完成，复用线程

cpu亲和:
把CPU内核和nginx的工作进程绑定在一起，让每个worker进程固定在一个CPU上执行，从而减少CPU的切换并提高缓存命中率，提高性能

sendfile:


学习环境
操作系统 centos7/64
环境确认
启用网卡