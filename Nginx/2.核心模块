### 查询nginx执行状态

```status.conf
server {
    location = /status {
        stub_status on;
    }
}
nginx -s reload

http://127.0.0.1/status
```

history 查询历史命令
!序号

### 随机主页
- with-http_random_index_module 在根目录里随机选择一个主页显示
```
# Syntax: random_index on/off;
# Default: off
# Context: location

/etc/nginx/conf.d/default.conf

location / {
    root /opt/app;
    random_index on;
}

```

### 内容替换，输出文本替换
```/etc/nginx/conf.d/default.conf
location / {
    root /usr/share/nginx/html;
    index index.html index.htm;
    sub_filter '原字符串' '新字符串';
    sub_filter_once off; # 全部替换
}

```
### 请求限制
- 限制连接数
- 限制请求数
--with-limit_conn_module 链接频率限制
--with-limit_req_module 请求频率限制
一次TCP请求至少产生一个HTTP请求
- 三次握手
SYN > SYC,ACK -> ACK
- 四次挥手
FIN -> ACK -> FIN -> ACK
- 全流程
SYN > SYC,ACK -> ACK -> REQUEST -> RESPONSE -> FIN -> ACK -> FIN -> ACK
为什么握手三次，挥手四次？
因为客户端需要断开，服务端接收到断开消息，但此时信息可能没有发完，所以在可以断开的时候需要通知客户端，可以断开。所以会多一次挥手。
断开？断开！断开？断开！

- ab
Apache 的命令模拟多线程并发请求，测试服务器负载压力，也可以测试nginx,linghthttp,iis等其他web服务器的压力
-n 总共的请求数
-c 并发的请求数
```
ab -b 40 -c 20 http://127.0.0.1/
```

### 请求限制
limit_req_zone
限制每秒的请求数
limit_req_zone key zone=name:size rate=rate;
limit_req;

```
limit_req_zone $binary_remote_addr zone=req_zone:1m rate=1r/s;
server {
    location / {
        limit_req req_zone;
        limit_req zone=req_zone burst=3 nodelay;
    }
}
```

### 静态资源web服务器
静态资源: 一般客户端发送请求到web服务器，web服务器从内存中取到相应的文件，返回给客户端，客户端解析并渲染显示出来。
鼎泰资源: 一般客户端请求的动态资源，先将请求交于web容器，web容器链接数据库，数据库处理数据之后，将内容教给web服务器，web服务器返回给客户端解析渲染处理

```
    location ~ ^/api { // 如果访问/api开头的路径，转到发http://localhost:3000
        proxy_pass http://localhost:3000
    }
```

浏览器资源: html, css, js
图片: jpeg, gif, png
视频: flv, mpeg
下载文件: word, excel

CDN:
CDN 的全称是 Content Delivery Network 即内容分发网络
CDN 系统能够事实地根据网络流量和各节点的链接，负载状况以及到用户的距离和相应的时间等综合信息将用户的请求重新导向距离用户最近的服务器节点上，其目的是使用户可就近取得所需要的内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度


### 跨域
```
location ~ ^/api {
    add_header Access-Control-Allow-Origin http://192.168.20.1:8080;
    add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE,OPTIONS;
    proxy_pass http://127.0.0.1:3000;
}
```

### 防盗链
防止网站资源被盗用
保证信息安全
防止流量过量

需要区别哪些请求是非正常的用户请求
使用http_refer防盗链
```
valid_referers none blocked 47.104.184.134;
if ($invalid_referer) { // 验证通过为0，不用过为1
    return 403;
}

```
### 代理服务
proxy_pass URL
- 正向代理
正向代理的对象是客户端，服务端看不到真正的客户端
通过公司代理服务器上网
比如翻墙，我们请求代理服务器，让代理服务器启去请求，再返回给我们
```
// 修改host文件，域名指向代理服务器
server_name localhost 192.168.20.129 www.cdlxgn.com; // 配置域名
resolver 8.8.8.8; // 谷歌域名解析地址
location / {
    proxy_pass http://$http_host$request_uri; // 客户端请求的时候去转发
}
```
- 反向代理
代理的是服务端，客户端看不到真正的服务端
```
location ~ ^/api {
    proxy_pass http://127.0.0.1:3000;
}
```

### 负载均衡
- 使用集群是网站解决高并发，海量数据问题的常用手段
- 当一台服务器的处理能力，存储空间不足时，不要企图去换更强大的服务器，对大型网站而言，不管多么强大的服务器，都满足不了网站业务持续增长的需求。
- 这种情况下，更恰当的做法是增加一台服务器分担原有服务器的访问及存储压力，通过负载均衡调度服务器，将来自浏览器的访问请求分发到应用服务器集群中的任何一台服务器上，如果有更多的用户，就在集群中加入更多的应用服务器，使应用服务器的负载压力不再成为整个网站的瓶颈。

upstream: 服务池，nginx吧请求转发到后台的一组upstream服务池中
```
upstream zhufeng {
    server 127.0.0.1:3000 weight=10; # 权重越高，分配的越多
    server 127.0.0.1:4000 weight=2;
    server 127.0.0.1:5000 weight=2;
}
server {
    location / {
        proxy_pass http://zhufeng;
    }
}

```
weight: 权重，数字
down: 禁止轮询
backup: 其他服务都挂掉了，才会执行
max_fails: 允许请求失败的次数
fail_timeout: 经过max_fails失败多长时间再次使用，默认10s
max_conns: 限制每个server最大额接收的连接数，性能高的服务可以链接数多一些
```
upstream zfpx {
    server 127.0.0.1:3000 down;
    server 127.0.0.1:4000 backup;
    server 127.0.0.1:5000 max_fails=1 fail_timeout=10s;
}
```

分配方式:
轮询: 每次请求按时间顺序逐一分配到不同的服务器，如果服务器down掉能自动剔除
weight：指定轮询几率
ip_hash
least_conn
url_hash
fair
正定义hash