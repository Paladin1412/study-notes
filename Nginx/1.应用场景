三个主要应用场景
- 静态资源
- 反向代理服务
- API服务
一个请求进来，访问到nginx，可以直接返回文件，也可以通过nginx访问应用服务器。也可以充当api接口服务。
Lua是nginx编程语言

nginx优势
高并发高性能
可扩展性好，轻量级，采用的是多进程(单线程，多路复用IO)
高可靠性
热部署
开原许可

多进程/单线程
一个进程最少有一个线程，进程象征车间，工人象征线程

工作流程:
1. Nginx在启动后，会有一个master进程和多个相互独立的worker进程。
2. 接收来自外界的信号，向各worker进程发送信号，每个进程都有可能来处理这个链接。
3. master进程能监控worker进程的运行状态，当worker进程异常退出后，会自动启动新的worker进程。
worker进程数，一般会设置成机器cpu核数，因为更多的worker数，只会导致进程相互竞争cpu，从而带来不必要的上下文切换。
使用多进程模式，不仅能提高并发率，而且进程之间相互独立，一个worker进程挂了不会影响到其他worker进程
IO多路复用
多个文件描述符的IO操作都能在一个线程里并发交替顺序完成，复用线程

cpu亲和:
把CPU内核和nginx的工作进程绑定在一起，让每个worker进程固定在一个CPU上执行，从而减少CPU的切换并提高缓存命中率，提高性能

sendfile:
零拷贝传输模式，动静分离
- 内核 -》 用户空间 -》 内核 -》 用户
- 内核 =》 用户

学习环境
操作系统 centos7/64
环境确认
启用网卡
vi /etc/sysconfig/network-scripts/ifcfg-ens33
ONBOOT=yes

systemctl disable firewalld.service // 关闭防火墙

### 安装
```
// 安装 gcc, c++ autoconf pcre 
yum -y install gcc gcc-c++ autoconf pcre pcre-devel make automake
yum -y install wget httpd-tools vim // wget 下载工具，httpd-tools 压测工具
```

安装nginx
```
vi /etc/yum.repos.d/nginx.repo
```
百度查找

查看nginx安装的配置文件和目录
rpm -ql nginx
-日志切割文件
/etc/logrotate.d/nginx
```
// 对访问日志进行切割
/var/log/nginx/*.log {
    daily
}
ls /var/log/nginx/*.log
```
- nginx 配置文件
/etc/nginx/nginx.config // 核心配置文件，主要更改的配置文件
/etc/nginx/conf.d/default.conf 默认http服务器配置文件

-cgi配置
- 编码转换映射文件
- 扩展名文件
/etc/nginx/mine.types
- 守护进程管理
用哦公寓配置系统守护进程管理
```
systemctl restart nginx.service // reload stop
service start nginx // 启动服务
```
- 指定用户
设置nginx进程启动的用户和用户组
--user=nginx # 指定用户
--group=nginx

### 配置文件
/etc/nginx/nigix.conf 主配置文件
/etc/nginx/conf.d/*.conf 包含conf.d 目录下面的所有配置文件
/etc/nginx/conf.d/default.conf

- 使用#可以添加注释，使用￥符号可以使用变量
- 配置文件由命令与命令块组成，指令块由{}将多条指令组织在一起
http {
    # include 语句允许把多个配置文件组合起来提升可维护性
    include mine.types;
    # 每条指令以;结尾，指令与参数之间以空格分隔
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    server {
        listen 80;
        service_name localhost;
        # 有些指令可以支持正则
        location / {
            root html;
            index index.html index.htm;
        }
        error_page 500 502 503 504 /50x.html;
    }
}

### 具体配置
user nginx; 设置运行此nginx用户名
worker_processes 1; 工作进程数
error log /var/log/nginx/error.log warn; 指定错误日志路径 日志格式
pid /var/run/nginx.pid; 这是一个文件，里面放置当前nginx的进程号
events {
    worker_connections 1024; 工作进程的最大连接数
}

http {
    include /etc/nginx/mine.types; 包含内容和文件名后缀的对应关系
    default_type application/octet-stream; 默认的content-type 下载方式
    log_format main '$remote-addr - $remote_user' 定义一个日志格式main
    access_log /var/log/nginx/access.log main; 访问日志的存放位置，格式为main
    sendfile on; 是否启用零拷贝模式
    #tcp_nopush on; 不主动推送TCP，先缓存
    keepalive_timeout 65; 活动链接超时时间
    #gzip on; 是否启用压缩
    include /etc/nginx/conf.d/*.conf; 包含其他配置文件
}

```
server { // 每个server 对应一个网站
    listen 80; 监听的端口号
    server_name localhost 192.168.20.129;  域名，多个用空格隔开
    # charset koi8-r; 指定字符集
    # access_log /var/log/nginx/host.access.log main; 指定访问日志的位置和格式
    location / { 匹配所有的路径
        root /usr/share/nginx/html; 静态文件根目录
        index index.html index.htm; 索引文件
    }
    # error_page 404 /404.html; 错误页面重定向
    # redirect server error pages to the statiic page /50x.html 把服务器错误状态码重定向到50x.html
    errpr_page 500 502 503 504 /50x.html; 当路径是/50.html的话，根目录是/usr/share/nginx/html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
    # proxy the PHP scripts to Apache listening on 127.0.0.1:80 如果访问的文件名是.php的话，会把此请求转发给127.0.0.1
    # location ~ \.php$ {
        proxy_pass http://127.0.0.1;
    }
    # pass the PHP scripts to FastCGT server listening on 127.0.0.1:9000 如果访问的文件名是.php的话，会把此请求转发给127.0.0.1:9000
    # location ~ \.php$ {
        fastcgi_pass http://127.0.0.1:9000;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME /scripts$fastcgi_script_name;
        include fastcgi_params;
    }
}
```

nginx - s reload === systemctl reload nginx.server : 重启命令

### 多级代理
1. 通过参数传入
2. http_x_forwarded_for = 客户端ip，代理服务器1ip,代理服务2ip