### 数据交互方式
- 表单
最基本，最简单，发送数据页面会跳转。
- ajax
优点是节省资源，页面不用重新下载，缺点是在网络慢的情况下可以重复发送，需要前端兼容
- jsonp
传统的跨域方式，缺点是安全性太差了，此方法基本淘汰，一般采用ajax跨域。
- webSocket

**注意:** 表单，ajax，jsonp都是表单，对前端来说可能写法不同，但是对后端来说接收到的都是表单。http的请求其实都是表单。

### ajax和webSocket对比
- ajax性能低，单向通信，跨域麻烦。
- webSocket性能高，不同条件性能提升不同，是ajax 的10~ 7000倍。双向通信(双工通信)，直接跨域
单向通信: 只能客户端请求服务端，服务端没办法请求客户端。

### 跨域
任何网站都有跨域的需求，
360buy.com ---> jd.com
sina.com ---> weibo.com
第三方数据，qq登录
危害: xss，跨站脚本攻击

跨域方法:
- 表单本身就是跨域
- ajax 比较麻烦，但是安全
- jsonp 虽然简单，但是有风险
- webSocket 可以兼容到IE6

### 安全性
- 系统安全性，不需要关心，前端也解决不了
- 代码安全性-偷懒，有漏洞，只要不偷懒，一般没什么事

### http
超文本传输协议
https: securlty: 安全的 258位加密

http0 :
- 一次性链接

http1.1: 
- 保持链接，网页一次性加载完页面资源。资源加载之后再断开

http2.0: 
- 目前是草案，
- 强制https;
- 双向通信;
- 多路复用，一个连接内可以传输很多条数据，比如一个连接加载多个js，多个请求。

### RFC
http协议的标准版本
https: RFC2818
http1.1: RFC 2016

https需要申请，需要一个身份(证书)，第三方权威机构

### 三次握手
- 客户端发送连接请求
- 服务器接受请求
- 客服端发送请求

### 请求 request
发送的内容叫消息，分为消息头和消息体

### 响应 response
响应的内容叫消息，分为消息头和消息体

### 消息头
- 小于等于32k

### 消息体
- 小于等于1G

GET是在头里面传输，POST在体里面传输，所以GET数据比较小，POST数据可以传很大

### OSI七层交互参考模型
1. 物理层, 物理学家关心的问题，通信工程，电流电压，硬件。
2. 链路层，内网寻址，管理内网之间的信息传递  ARP、ICMP
3. 网络层，外网寻址，网络之间的信息传递   IP
4. 传输层，通信的稳定性，数据不能弄丢，检查篡改，顺序  TCP
5. 表现层，统一各种网络结构，被传输层取代了
6. 会话层，希望可以记录状态，被应用层替代。
7. 应用层，应用细节，http，FTP， SMTP， POP3

五层模型
1. 物理层
2. 链路层
3. 网络层
4. 传输层
5. 应用层

通信过程是无状态的，意思是每次都是全新的，陌生的。
TCP：传输控制协议
1. 丢失重传，保证达到
2. 错误重发，保证质量
3. 保证顺序
应用在文件下载，聊天。

UDP：用户数据报协议
1. 不保证到达
2. 不保证质量
3. 不保证顺序
对质量没有绝对要求，对延迟有很高要求，比如，直播，IP电话。

### 表单
对于服务器来说，区分不出来是form还是jsonp还是ajax
1. 属性
- action: 提交地址
- method: 提交方法，GET，POST，PUT，HEADER，DELETE，自定义方法
- 表单的name必须要加。
- submit按钮
- http不支持断点续传
- GET和POST的区别
POST并没有比GET安全，GET和POST安全性完全一样，https才是真安全的，非对称加密的。
GET请求是有缓存的，容量小，看得见，利于分享和收藏(因为参数在url上)
POST 容量大，看不见，不缓存
2. 数据提交方法的区别
3. 校验的问题

### ajax
表单提交比ajax稳定，因为表单提交是浏览器实现的，ajax是js实现的。
- XMLHttpRequest
- open('GET', 'url?params', true)
- send(body);
- readstatechange 通信状态变化时
- readState 状态  0: 初始化，1: 已连接，2: 已发送，3: 已接header，4: 已接收body
- status http的状态码 1: 消息，2: 成功，3: 重定向，4: 客户端错误，5: 服务端错误，6: 扩展
301: 永久重定向
302: 临时重定向
304: 缓存
503: 服务不可用，超载或者正在维护
```
if (xhr.status >= 200 && xhr.state < 300 || xhr.state === 304) {
    responseText： 文本式
    responseXML： XML格式数据
}
```
<person>
  <name>小明</name>
  <job>前端开发</job>
<person>
xml.getElementByTagName('name')[0]
html是学习的xml语法和格式。
xml是显示数据的，但是没有json简单，所以越来越少被用到。
html是固定的标签，xml是自定义的标签，随便写。
重定向: 给浏览器下命令，让浏览器请求另一个地址，重定向过多，会报错。
转发: 在服务器的内部将请求转交给另一个模块来处理。对客户端不可见。