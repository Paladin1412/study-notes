### 开篇
ajax2.0
监控文件上传进度
formData可以直接做到
低版本浏览器可以用swf辅助完成flash - 开源库swfuploader


### ajax2.0
1. formdata, 控制要提交数据的状态，文件上传显示进度
2. cors跨域

### formdata
formdata主要功能用在上传文件，普通的请求并没有ajax方便。
创建formdata
set(key, value)，设置一个值，如果设置两次相同的key，第二个会覆盖第一个，在form中可以设置多个相同的name，服务会接收一个数组，如果想实现这种，可以使用append
append(key, value):
get(key): 返回设置的值，如果不存在返回undefined
getAll(key): 获取同一个key下的所有值
delete(key): 删除设置的值

浏览器
```
const fileDom = document.getElementById('file');
const data = new FormData();
data.set('name', 'yindong');
Array.from(fileDom.files).forEach(file => {
    data.append('f1', file);
})
const oAjax = new XMLHttpRequest();

let arr = [];
data.forEach((value, key) => {
    arr.push(`${encodeURLComponent(key)}=${encodeURLComponent(value)}`);
})

oAjax.open(`GET`, `http://127.0.0.1:8080?${arr.join('&')}`, true);
// post
// oAjax.setRequstHeader('Content-Type', 'application/x-www-form-urlencoded');
oAjax.send();

oAjax.onreadystatechange = function() {
    if (oAjax.readyState == 4) {
        if (oAjax.status >= 200 && oAjax.status < 300 || oAjax.status == 304) {
            alert('成功');
        } else {
            alert('失败');
        }
    }
}

```
服务器 
express
body-parser
multer
```
const express = require('express'); // 主体
const multer = require('multer'); // 接收文件POST数据
const body = require('body-parser');// 接收普通数据

const server = express();
server.use(body.urlencoded({ extended: false }));
const multerObj = multer({ dest: './upload/'});

server.use(multerObj.any());

server.listen(8080);
server.post('/', (req, res) => { // post请求会走这个
    res.send('ok'); // express的res将write和end合并成了send
    console.log(req.body); // body-parser 会在req上添加一个body
    console.log(req.files); // multer 会在req上添加一个files
})
server.post('/api', () => { // get请求会走这个
    
})
server.use('/', () => { // 所有请求都走这个
    
})
// 设置静态服务器的地址
server.use(express.static('./www/'));
```

Access-Control-Allow-Origin: 允许哪个域访问


### 上传文件进度
```
const fileDom = document.getElementById('file');
const data = new FormData();
Array.from(fileDom.files).forEach(file => {
    data.append('f1', file);
})
const oAjax = new XMLHttpRequest();


oAjax.upload.onprogress = function(ev) {
    const percent = ev.loaded / ev.total;
    // <meter value="0" min="0" max="100"></mater>
}

oAjax.open(`POST`, `http://127.0.0.1:8080`, true);
// post
// oAjax.setRequstHeader('Content-Type', 'application/x-www-form-urlencoded');
oAjax.send(data);

oAjax.onreadystatechange = function() {
    if (oAjax.readyState == 4) {
        if (oAjax.status >= 200 && oAjax.status < 300 || oAjax.status == 304) {
            alert('成功');
        } else {
            alert('失败');
        }
    }
}

```
- ajax2.0对象上面有个upload对象, upload对象上面有个onprogress事件，该方法必须要放在send前面。
1. ev.loaded 完成的大小
2. ev.total 总大小
- upload方法会在post之前添加一个options请求, 所以服务器要处理options请求，通用服务器都有这个功能。

服务器代码
```
const express = require('express'); // 主体
const multer = require('multer'); // 接收文件POST数据
const body = require('body-parser');// 接收普通数据

const server = express();
server.use(body.urlencoded({ extended: false }));
const multerObj = multer({ dest: './upload/'});

server.use(multerObj.any());

server.listen(8080);
server.use('/', (req, res) => { // post请求会走这个
    res.send('ok'); // express的res将write和end合并成了send
    console.log(req.body); // body-parser 会在req上添加一个body
    console.log(req.files); // multer 会在req上添加一个files
})
server.post('/api', () => { // get请求会走这个
    
})
server.use('/', () => { // 所有请求都走这个
    
})
// 设置静态服务器的地址
server.use(express.static('./www/'));

```

### 注意: 
ajax上面有两个process，
- ajax上面的
loaded 是已上传的文件个数
total 是上传的文件总数
- upload上面的
是已上传的文件的大小
是上传文件总数的大小

### addEventListener
-DOM 1
DOM Level 1
- DOM2
DOM Level 2
- DOM3
DOM Level 3
HTML5中的时间，大部分都是dom3，也有部分dom4
官方要求所有dom3中的事件，都得绑定，依照标准，避免浏览器标准化代码不能用。

### 读取文件内容 FileReader
改方法需要工作在服务器环境下
drop事件中，文件在 ev.dataTransfer.files;

```
const file = ev.dataTransfer.files[0];
const reader = new FileReader();
reader.onload = function() {
    // 文本内容
    console.log(reader.result);
}
// 读取文本文件
reader.readAsText(file);

```
先onload后读取，因为，如果先读取后load可能还没有绑定就读取完了。
使用方法
1. 实例化一个FileReader
2. onload
3. readAsText/readAsDataURL/readAsBinaryString/readAsArrayBuffer

readAsDataURL: base64数据格式，任何文件都可以编码成base64格式。
服务器和浏览器传输数据，可以有两种方法
1、直接二进制
2、base64，可以把二进制数据表现成字符串，不会破坏文件。
readAsBinaryString: 以字符串形式存储的二进制数据，
readAsArrayBuffer: 以二进制形式存储数据
