### 原生NodeJs
- 服务器基本结构，解析数据(GET, POST), 响应静态资源(fs);

表单的三种POST提交方式 enctype
1、text/plain:  用的很少，纯文本
2、application/x-www-form-urlencoded：默认方式， url编码方式
3、multipart/form-data: 上传文件内容
如果使用x-www-form-urlencoded也会上传文件，但只会上传文件的名字。multipart/form-data会上传文件的内容。

### post提交文件数据
<分隔符>\r\n

------WebKitFormBoundaryDqs4grRjEIPy5ZmY
Content-Disposition: form-data; name="user"

blue
------WebKitFormBoundaryDqs4grRjEIPy5ZmY
Content-Disposition: form-data; name="pass"

asdfasdf
------WebKitFormBoundaryDqs4grRjEIPy5ZmY
Content-Disposition: form-data; name="f1"; filename="a.txt"
Content-Type: text/plain

aaa
bbb
ccccccc
------WebKitFormBoundaryDqs4grRjEIPy5ZmY--

--------------------------------------------------------------------------------

<分隔符>
Content-Disposition: form-data; name="user"

blue
<分隔符>
Content-Disposition: form-data; name="pass"

asdfasdf
<分隔符>
Content-Disposition: form-data; name="f1"; filename="a.txt"
Content-Type: text/plain

aaa
bbb
ccccccc
<分隔符>--

--------------------------------------------------------------------------------

<分隔符>\r\n
Content-Disposition: form-data; name="user"\r\n
\r\n
blue\r\n
<分隔符>\r\n
Content-Disposition: form-data; name="pass"\r\n
\r\n
asdfasdf\r\n
<分隔符>\r\n
Content-Disposition: form-data; name="f1"; filename="a.txt"\r\n
Content-Type: text/plain\r\n
\r\n
<文件内容>\r\n
<分隔符>--

--------------------------------------------------------------------------------

<分隔符>\r\n数据描述\r\n\r\n数据值\r\n
<分隔符>\r\n数据描述\r\n\r\n数据值\r\n
<分隔符>\r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n
<分隔符>--

--------------------------------------------------------------------------------

解析数据：

1.用"<分隔符>"切开数据
[
  空,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n,
  --\r\n
]

2.丢弃头尾元素
[
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述1\r\n数据描述2\r\n\r\n<文件内容>\r\n,
]

3.丢弃每一项的头尾\r\n
[
  数据描述\r\n\r\n数据值,
  数据描述\r\n\r\n数据值,
  数据描述1\r\n数据描述2\r\n\r\n<文件内容>,
]

4.用第一次出现的"\r\n\r\n"切分
  普通数据：[数据描述, 数据值]
  或
  文件数据：[数据描述1\r\n数据描述2, <文件内容>]

5.判断描述的里面有没有"\r\n"
  有——文件数据：[数据描述1\r\n数据描述2, <文件内容>]
  没有——普通数据：[数据描述, 数据值]

6.分析"数据描述"

--------------------------------------------------------------------------------

### 对Buffer数据进行：
```
const b = new Buffer('abcccc-=-qwerqwer');
b.indexOf('-=-');
```
1.查找    indexOf()
2.截取    slice(s, e)     [s, ..., e-1]
          slice(s)
3.切分    split
```
Buffer.prototype.split = Buffer.prototype.split || function(b) => {
    const arr = [];
    let cur = 0;
    while ((n = this.indexOf(b, cur)) != -1) {
      arr.push(this.slice(cur, n));
      cur = n +b.length;
    }
    arr.push(this.slice(cur));
    return arr;
}
```

### 附件上传

1.用分隔符切割数据
分隔符每次都是随机的，16位字符，字母大小写加数字，共62个字符。
分隔符在请求头中，content-type的boundary, 使用分号空格将boundary切割出来。
```
const uuid = require('uuid/v4');

if ( req.headers['content-type']) {
   const str = req.headers['content-type'].split('; ')[1];
    if (str) {
      // 获取到的和真实的相比会少两个-- 手动补上
      const boundary = `--${ str.split('=')[1] }`;
      console.log(boundary);
      let arr = data.split(boundary);
      // 头和尾数据没用，可以删掉
      arr.shift();
      arr.pop;
     // 丢弃掉每个数据头尾的\r\n
      arr = arr.map(buffer => buffer.splice(2, buffer.length - 2));
      // 每个数据在第一个\r\n处切成两半
      const post = {};
      const files = {};
      arr.forEach(buffer => {
        let n = buffer.indexOf('\r\n');
        let dispostion = buffer.slice(0, n);
        let content = buffer.slice(n+4);
       // 判断数据是普通数据还是文件数据
       // 文件数据在content中，所以disposition可以转成字符串，没关系
       disposition = disposition.toString();
        if (disposition.indexOf('\r\n') == -1) {
            // 普通数据, content可以保存成字符串
            content = content.toString();
            let name = disposition.split('; ')[1].split('=')[1];
            name = name.substring(1, name.length - 1);
            post[name] = content;
        } else {
            // 文件数据
            let [line1, line2] = disposition.split('\r\n');
            let [, name, filename ] = line1.split('; ');
            let type = line2.split(': ')[1];
            name = name.split('=')[1];
            name = name.substring(1, name.length - 1);
            filename = filename.split('=')[1];
            filename = filename.substring(1, filename.length - 1);
            const path = `upload/${uuid()}`;
            fs.writeFile(path, content, err => {
              if (err) {
                // 失败
              } else {
                // 成功
                files[name] = { filename, path, type};
                console.log(files);
              }
            });
        }
      })
    }
}

```
### uuid
也叫guid，全球唯一标识符
一切协议都是rfc，uuid协议是rfc4122
node中uuid模块
v1: 使用的时间戳
v3: 有命名空间，但同一台服务还是会重复
v4: 加入随机数的概念
v5: 加入加密hash值

package中的^代表和这个版本兼容的最高版本

### web性能负载
并不是对cpu的负载
- 是对内存的使用
- 对IO管理
- 对网络的使用

### blob 和arrayBuffer的区别
- arrayBuffer更贴近于array，本质上是一个array，是用array存储的二进制数据
- blob是一个块，本质上是一个数据

### npm淘宝镜像源
npm install -g cnpm --registry=https://registry.npm.taobao.org
npm/cnpm
cnpm init

- -D: --save-dev  开发环境需要的模块
- -S: --save 生产环境需要的模块


get/post/file

### 问题：
1.现在：会等到所有数据都到达了才开始处理
  更好：收到一部分就解析一部分          极大节约内存
2.fs.readFile
  fs.writeFile

```
http.createServer((req, res)=>{
  fs.readFile(`www${req.url}`, (err, data)=>{
    res.write(data);
  });
});
```
readFile先把所有数据全读到内存中，然后回调：
1.极其占用内存
2.资源利用极其不充分



### 流：
读一点、发一点
1.读取流     fs.createReadStream、req
2.写入流     fs.createWriteStream、res
3.读写流     用处: 压缩、加密
```
const fs = require('fs');
const rs = fs.createReadStream('1.png');
const ws = fs.createWriteStream('2.png');
rs.pipe(ws); // 从1流入2
```

### 响应服务器
```
const http = require('http');
const fs = require('fs');
const zlib = require('zlib');

const server = http.cerateServer((req, res) => {
    const rs = fs.cerateReadStream(`www${req.url}`);
    res.setHeader('content-encoding', 'gzip');
    const gz = zlib.createGzip();
    rs.pipe(gz).pipe(res);
    rs.on('error', err => {
        res.setHeader(404);
        res.write('Not Found');
        res.end();
       console.log('读取失败')
    })
    rs.on('finish', err => {
       console.log('写入完成')
    })
}).listen(8080)
```
所有个流上都有个on事件

### zlib
压缩功能
```
const zlib = require('zlib');
const fs = require('fs');
const rs = fs.cerateReadStream('jquery.js');
const ws = fs.cerateWriteStream('jquery.js.gz');
const gz = zlib,createGzip();
rs.pipe(gz).pipe(ws);
ws.on('error', (err) => {
    console.log('失败');
})
ws.on('finish', () => {
    console.log('完成')
})
```
服务端压缩成gzip需要设置响应头，content-encoding: gzip, 否则无法加载。

面向字节的设备: 一个一个字节输入
面向流的设备: 网卡，一块数据