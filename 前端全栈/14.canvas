### canvas
- canvas 只能通过width和height设置宽高。
- 路径操作 moveto lineto stroke
- 一切路径操作之前，一定要beginPath();
### 操作
```
const oC = document.getElementById('c1');
const gd = oC.getContext('2d');
gd.moveTo(100, 100);
gd.lineTo(200, 200);
gd.strokeStyle = 'red';
gd.stroke();
// gd.fill();

gd.beginPath(); // 重新开始一条路径。
gd.moveTo(300, 100);
gd.lineTo(400, 200);
gd.strokeStyle = 'yellow';
gd.stroke();
```
beginPath：清除之前的路径， 必须加
closePath：闭合当前的路径， 选择加
如果不使用closePath，图形不会真的闭合

线: moveTo, lineTo
矩形: rect
圆: arc

### 操作
rect(); 矩形， 左上角坐标，宽高
ract(100, 100, 200, 200);
strokeRect(); 边框矩形
fillRect(); 填充矩形

clearRect(); 删除一块区域

图形不能修改 -- 删了重画
也没有事件
速度极快

### requestAnimationFrame
定时器函数, 比 setInterval 性能更高
requestAnimationFrame(() => {
    console.log(1);
});

### 圆
arc 圆心，半径，起点角度，终点角度，是否是逆时针绘图
arc(cx, cy, r, 0dge, 10deg, bool);
角度都是弧度制
0弧度是3点钟方向

```
// 弧度变角度
function d2a(n) {
    return n * Math.PI / 180;
}
// 角度变弧度
function a2d(n) {
    return n * 180/Math.PI;
}
gd.arc(cx, cy, r, a2d(0), a2d(360), false);
gd.stroke();
```

### 文字
strokeText('文字', 100, 100);
fillText('文字', 100, 100);

### transform
图形操作要放在绘图之前。下笔之前考虑好
变换都是整个画布作为单位进行变换，兼容方式，将图形移动到画布左上角，中心位于画布左上角，转完再移动出来
1. rotate
2. translate
3. scale
```
gd.save(); // 保存canvas 当前状态
gd.translate(200, 175); // 比 rotate晚执行，先写的后执行
gd.rotate(10 * Math.PI / 180);
gd.strokeRect(-100, -75, 200, 150);
gd.restore(); // 恢复到上一次保存的状态
```
上面的代码，先旋转，绘制，然后再translate
gd.save(); 保存住现在的状态，后面写的改变状态 如 translate 不会产品影响。
gd.restore(); // 恢复到上一次保存的save状态，类似于初始化。

### 绘制图片
drawImage(图片, sx, sy, sw, sh, dx, dy, dw, dh); 原图位置大小，目标位置大小
图片对象可以是img表桥，可以是new Image，可以是canvas，可以是video;

```
const oImg = new Image(); // 和 document.getElementById('img') 一模一样
oImg.src = 'src';
oImg.onload = function() {
    gd.drawImage(oImg, 0, 0);
}
```

### 像素级操作
- 性能较低的一种操作方式
- 有跨域的问题，只能读取同域的文件
1. 获取一块像素， 数组
2. 设置一块像素
3. 创建一块像素
```
const oImg = new Image();
oImg.src = '路径';
oImg.onload = function() {
    gd.drawImage(oImg, 0, 0);
    const imageData = gd.getImageData(0, 0, 800, 400);
    // imageData 是一个数组，一个像素占4位，rgba; 四个值都是0 ~ 255
    for (let r = 0; r < h; r++) {
        for (let c = 0; c < w; c++) {
            // (r * w + c) * 4 + 0 红
            // (r * w + c) * 4 + 1 绿
            // (r * w + c) * 4 + 2 蓝
            // (r * w + c) * 4 + 3 透明度
            imageData.data[(r * w + c) * 4 + 0] = 0;
        }
    }
}
gd.putImageData(imageData, 0, 0)
```

### 视频滤镜
```
const oV = document.getElementById('video');

// 视频时间变化事件
// oV.addEventListener('timeupdate', () => {
    // gd.drawImage(oV, 0, 0);
// })
requestAnimationFrame(() => {
    gd.drawImage(oV, 0, 0);
    const imageData = gd.getImageData(0, 0, w, h);
    gd.putImageData(oV, 0, 0);
})
```

### 保存图片
- 发给服务器
toDataURL()：将图片转为base64， 在canvas标签上使用该方法，oC.toDataURL();
```
http.createServer((req, res) => {
    if (req.url == '/upload_base64') {
        const arr = [];
        req.on('data', data => {
            arr.push(data);
        });
        req.on('end', () => {
            const buffer = Buffer.concat(arr);
            fs.writeFile('1111.png', buffer.toString().replace(/^data:[^,]+;base64,/, ''), 'base64', err => {
                res.end('OK');
            })
        })
    }
});
```
- 下载图片
通过服务器实现下载
```
http.createServer((req, res) => {
    if (req.url == '/upload_base64') {
        const arr = [];
        req.on('data', data => {
            arr.push(data);
        });
        req.on('end', () => {
            const buffer = Buffer.concat(arr);
            res.setHeader('Content-Disposition', 'attachment; filename=download.png');
            const data = new Buffer(buffer.toString().replace(/^data:[^,]+;base64,/, ''), 'base64');
            res.end(data);
        })
    }
});
```

### canvas 与 svg比较
canvas 是位图，不保留图形信息，不能修改，无事件，性能特别高，适合: 游戏，大型图表
svg 是位图，保留图形信息，能修改，有事件，性能和普通标签差不多，适合: 交互频繁，普通图表，