## 目标
- 了解nodejs的特点和应用场景
- 掌握node模块系统使用及原理剖析
- 掌握核心api的使用
- 实战一个简版的Express服务

## NodeJs是什么
node是一个异步的事件驱动的javascript运行时。即node并不是一门开发语言，而是一个运行环境，让服务器可以识别并运行javascript代码。
node的特点为 非阻塞IO 和 事件驱动 这两点我们再后面会讲到。

浏览器端的javascript包含三部分
1. DOM 文档对象模型 api
2. BOM 浏览器对象模型 api
3. ECMAScript，基本语法 + 对象

在服务端，因为并不存在浏览器环境，也就没有DOM和BOM，所以在node中，只有ECMAScript + 一部分对象，如日期对象Date, Math对象等。

## 安装node
直接官网[下载](http://nodejs.cn/download/), 点击下一步安装即可。

## 基本用法
新建一个js文件，叫test.js;
在里面输入一段js代码
```test.js
var name = "yindong";
console.log(name);
```
打开终端命令行，进入到test.js所在的目录，在命令行执行
```
node ./test.js
```
可以看到命令行输出 ”yindong“, 即完成了第一个node文件的运行

## 模块系统
node的模块分为三种，
1. 内建模块
2. 第三方模块
3. 自定义模块

- 内建模块
node中自带的模块，包括fs模块，os模块等
```
// 内建模块使用需要使用require导入, 模块名称不需要携带路径
const fs = require('fs');

const os = require('os');
```

- 第三方模块
第三方模块为个人或组织开发的模块，使用前需要安装，使用方式和内建模块相同
```
// 安装模块 webpack
npm install webpack -g
// 导入webpack
const webpack = require('webpack');

```

- 自定义模块
node支持用户自己定义模块，一般情况下，一个文件就代码一个模块， 模块一般为js后缀名
比如新建一个模块，模块名为conf.js; 
```conf.js
var age = 18;
// 导出模块内容，模块中的内容需要导出才可以被载入使用
module.exports = age;
```
模块使用
```
// 导入模块，自定义的模块导入需要写明相对位置，如不写则会识别为内建模块或第三方模块，造成模块无法找到
var conf = require('./conf);
console.log(conf);
```

## 核心API

- fs
文件操作api
```
const fs = requrie('fs');
```