1. 跨域解决
2. 响应头设置
3. html模板ejs
4. 文件上传

## 简单web服务器
```
const http = require('http');

const server = http.createServer((req, res) => {
    res.write("123");
    res.end();
});
server.listen(8080);

```

## 跨域
因为浏览器同源策略的原因，会对 域名，端口，协议进行校验，如果不能保证三者相同，则存在跨域拦截，即请求无法获取到服务器的返回数据

三种方式可以解决跨域
第一种. 保证前后端 域名，端口，协议 一致
第二种. 使用jsonp 解决跨域问题。
第三种. CORS，服务端设置响应头Access-Control-Allow-Origin，值为允许跨域的域名

服务端设置cors案例
```
const http = require('http');

const server = http.createServer((req, res) => {
    res.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:5500'); // 允许跨域的域名http://127.0.0.1:5500
    res.write("123");
    res.end();
});
server.listen(8080);

```

前端ajax代码, 前端运行服务器，域名端口号为http://127.0.0.1:5500
```
const xhr = new XMLHttpRequest();
xhr.open('POST', 'http://127.0.0.1:8080/', true);
xhr.resopnseType = 'json';
// document.cookie = 'token=100';
xhr.withCredentials = true; // 跨域不允许携带cookie，设置强制携带，需要要求服务端设置的允许域名不能为*
xhr.setRequestHeader('token', 'asd.askfs.g'); // 设置请求头
xhr.onreadstatechange = function() {
    if (xhr.status === 200 && xhr.readyState === 4) {
        
    }
}
xhr.send();
```
Access-Control-Allow-Origin 响应头可设置允许域名为具体域名，也可设置为通配符 *
res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,DELET,OPTIONS,POST'); // 允许的请求方式
res.setHeader('Access-Control-Allow-Headers', 'Content-type,token'); // 允许携带的请求头
res.setHeader('Access-Control-Max-age', 10); 允许权限测试的缓存时间，单位秒，options的发送间隔
res.setHeader('Access-Control-Allow-Credentials', true); // 允许跨域写到cookie
res.setHeader('Set-Cookie', ['name=1', 'age=2']); 设置cookie
res.setHeader('Content-Type', 'text/plain;charset=utf-8'); // 设置响应字符集，解决中文乱码

## ejs模板的使用
```
const ejs = require('ejs');
const fs = require('fs');
const http = require('http');

const server = http.createServer((req, res) => {
    const data = { name: 'yd', age: 18 };
    const template = fs.readFileSync(path.resolve(__dirname, 'index.ejs'), 'utf-8');
    const str = ejs.render(template, data);
    res.write(str);
    res.end();
});
server.listen(8080);
```
index.ejs;

<div>
<%=name%>  
<%=age%>
</div>

ejs 解析原理

function render(template, data) {
    return template.replace(/<%=([\s\S]*?)%>/g, function () {
        return data[arguments[1]];
    })
}

复杂一点的代码
<div>
<%arr.forEach(a => {%>
    <li><%=a%></li>
<%})%>
</div>


```
function render(template, data) {
    template = template.replace(/<%=([\s\S]*?)%>/g, function() {
        return '${' + arguments[1] + '}';
    })
    let head = 'let str;\r\nwith(data){\r\n';
    head += 'str=`';
    const content = template.replace(/<%([\s\S]*?)%>/g, function() {
        return '`\r\n' + arguments[1] + '\r\nstr+=`';
    });
    const tail = '`\r\n}\r\nreturn str;';
    const fn = new Function('data', head + content + tail);
    return fn(data);
}
```

## localStorage sessionStorage cookie 区别
localStorage: 本地存储，每个网站最大5m，一直存，不能跨域，存储在浏览器中
sessionStorage: 不关闭浏览器就存活
cookie: 浏览，每次请求时，会带上cookie，做注册登录(cookie存放不敏感信息)
session: 比较安全,内容存放在服务器，session是基于cookie
每次请求时 会自动带上cookie, 我可以去通过sssion找到当前账号的对应内容，内存存在服务器了
redis / mongo 存储到数据库中


## 附件上传
表单的三种POST提交方式 enctype
1、text/plain:  提交纯文本的数据，用的很少。
2、application/x-www-form-urlencoded：默认方式， 采用url编码方式
3、multipart/form-data: 上传文件内容，上传附件时，要选用该种类型。
如果使用x-www-form-urlencoded默认方式，也会上传文件，但只会上传文件的名字。文件内容不会上传


```
// 一个简单的服务器
const http = require('http');
const fs = reuqire('fs');
const URL = require('url');
const server = http.createServer((req, res) => {
    console.log(URL.parse(req.url, true));
    res.write("start");
    res.end();
});
server.listen(8080);
```

POST 提交的附件数据, 如下
```
------WebKitFormBoundarysMq8coSZNCVKkBzi
Content-Disposition: form-data; name="aaa"

12
------WebKitFormBoundarysMq8coSZNCVKkBzi
Content-Disposition: form-data; name="bbb"

13
------WebKitFormBoundarysMq8coSZNCVKkBzi
Content-Disposition: form-data; name="file"; filename="365.png"
Content-Type: image/png


------WebKitFormBoundarysMq8coSZNCVKkBzi--
```
在请求头中，存在 Content-Type: multipart/form-data; boundary=----WebKitFormBoundarysMq8coSZNCVKkBzi
boundary的值作为分隔符

```
<分隔符>
Content-Disposition: form-data; name="aaa"

12
<分隔符>
Content-Disposition: form-data; name="bbb"

13
<分隔符>
Content-Disposition: form-data; name="file"; filename="365.png"
Content-Type: image/png


<分隔符>--
```
整理数据
```
<分隔符>\r\n
Content-Disposition: form-data; name="aaa"\r\n
\r\n
12\r\n
<分隔符>\r\n
Content-Disposition: form-data; name="bbb"\r\n
\r\n
13\r\n
<分隔符>\r\n
Content-Disposition: form-data; name="file"; filename="365.png"\r\n
Content-Type: image/png\r\n
\r\n
文件内容\r\n
<分隔符>--\r\n
```

<分隔符>\r\n数据描述\r\n\r\n数据值\r\n
<分隔符>\r\n数据描述\r\n\r\n数据值\r\n
<分隔符>\r\n数据描述1\r\n数据描述2\r\n\r\n文件内容\r\n
<分隔符>--\r\n

1.用"<分隔符>"切开数据
[
  空,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述1\r\n数据描述2\r\n\r\n文件内容\r\n,
  --\r\n
]

2.丢弃头尾元素
[
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述\r\n\r\n数据值\r\n,
  \r\n数据描述1\r\n数据描述2\r\n\r\n文件内容\r\n,
]

3.丢弃每一项的头尾\r\n
[
  数据描述\r\n\r\n数据值,
  数据描述\r\n\r\n数据值,
  数据描述1\r\n数据描述2\r\n\r\n文件内容,
]

4.用第一次出现的"\r\n\r\n"切分
  普通数据：[数据描述, 数据值]
  或
  文件数据：[数据描述1\r\n数据描述2, <文件内容>]

5.判断描述的里面有没有"\r\n"
  有的为文件数据：[数据描述1\r\n数据描述2, <文件内容>]
  没有的为普通数据：[数据描述, 数据值]

6.分析"数据描述"

用分隔符切割数据
分隔符每次都是随机的，16位字符，字母大小写加数字，共62个字符。
分隔符在请求头中，content-type的boundary, 使用分号空格将boundary切割出来。

### 对Buffer数据进行操作

```
const b = new Buffer('abcccc-=-qwerqwer');
b.indexOf('-=-');
```
1.查找    indexOf()
2.截取    slice(s, e)     [s, ..., e-1]
          slice(s)
3.切分    split
```
// 新增Buffer的split方法
Buffer.prototype.split = Buffer.prototype.split || function(b) {
    const arr = [];
    let cur = 0;
    while ((n = this.indexOf(b, cur)) != -1) {
      arr.push(this.slice(cur, n));
      cur = n +b.length;
    }
    arr.push(this.slice(cur));
    return arr;
}
```

附件上传
```
const http = require('http');
const fs = require('fs');
const uuid = require('uuid/v4');
Buffer.prototype.split = Buffer.prototype.split || function(b) {
    const arr = [];
    let cur = 0;
    while ((n = this.indexOf(b, cur)) != -1) {
      arr.push(this.slice(cur, n));
      cur = n +b.length;
    }
    arr.push(this.slice(cur));
    return arr;
}

const server = http.createServer((req, res) => {
    if (req.method === 'POST') {
        const arr = []; // 创建一个数组，用于接收前端传入的数据，前端传入的数据为Buffer类型。
        req.on('data', data => { // 持续接收数据
            arr.push(data);
        });
        req.on('end', () => { // 数据传输完成
            const data = Buffer.concat(arr);
            // const data = querystring.parse(str);
            if (req.headers['content-type']) {
                const str = req.headers['content-type'].split('; ')[1];
                if (str) {
                    // 获取到的和真实的相比会少两个-- 手动补上
                    const boundary = `--${str.split('=')[1]}`;
                    let arr = data.split(boundary);
                    // 头和尾数据没用，可以删掉
                    arr.shift();
                    arr.pop();
                    // 丢弃掉每个数据头尾的\r\n
                    arr = arr.map(buffer => buffer.slice(2, buffer.length - 2));
                    const post = {};
                    const files = {};
                    arr.forEach(buffer => {
                        // 每个数据在第一个\r\n处切成两半
                        let n = buffer.indexOf('\r\n\r\n');
                        let disposition = buffer.slice(0, n);
                        let content = buffer.slice(n + 4);
                        // 判断数据是普通数据还是文件数据
                        // 文件数据在content中，所以disposition可以转成字符串，没关系
                        disposition = disposition.toString();
                        // 如果disposition中不存在\r\n, 则为普通数据，否则为附件
                        if (disposition.indexOf('\r\n') == -1) {
                            // 普通数据, content可以保存成字符串
                            content = content.toString();
                            let name = disposition.split('; ')[1].split('=')[1];
                            name = name.substring(1, name.length - 1);
                            post[name] = content;
                        } else {
                            // 文件数据
                            let [line1, line2] = disposition.split('\r\n');
                            let [, name, filename] = line1.split('; ');
                            let type = line2.split(': ')[1];
                            name = name.split('=')[1];
                            name = name.substring(1, name.length - 1);
                            filename = filename.split('=')[1];
                            filename = filename.substring(1, filename.length - 1);
                            const path = `upload/${uuid()}`;
                            fs.writeFile(path, content, err => {
                                if (err) {
                                    // 失败
                                } else {
                                    // 成功
                                    files[name] = { filename, path, type };
                                }
                            });
                        }
                    })
                    res.write(JSON.stringify({
                        message: "成功"
                    }));
                    res.end(); // 结束
                }
            }
        })
    } else {
        fs.readFile('./index.html', (err, data) => {
            res.write(data);
            res.end();
        })
    }
});
server.listen(8080);
```

html 代码
```
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>XMLHttpRequest上传文件</title>
    <script type="text/javascript">
        //图片上传
        var xhr;
        //上传文件方法
        function UpladFile() {
            var fileObj = document.getElementById("file").files[0]; // js 获取文件对象
            var url =  "http://127.0.0.1:8080" + "/upload"; // 接收上传文件的后台地址

            var form = new FormData(); // FormData 对象
            form.append("aaa", '1'); // 文件对象
            form.append("bbb", '2'); // 文件对象
            form.append("file", fileObj); // 文件对象

            xhr = new XMLHttpRequest();  // XMLHttpRequest 对象
            xhr.open("post", url, true); //post方式，url为服务器请求地址，true 该参数规定请求是否异步处理。
            xhr.onload = uploadComplete; //请求完成
            xhr.onerror =  uploadFailed; //请求失败

            xhr.upload.onprogress = progressFunction;//【上传进度调用方法实现】
            xhr.upload.onloadstart = function(){//上传开始执行方法
                ot = new Date().getTime();   //设置上传开始时间
                oloaded = 0;//设置上传开始时，以上传的文件大小为0
            };

            xhr.send(form); //开始上传，发送form数据
        }

        //上传成功响应
        function uploadComplete(evt) {
            //服务断接收完文件返回的结果

            var data = JSON.parse(evt.target.responseText);
            console.log(data);

        }
        //上传失败
        function uploadFailed(evt) {
            alert("上传失败！");
        }
        //取消上传
        function cancleUploadFile(){
            xhr.abort();
        }


        //上传进度实现方法，上传过程中会频繁调用该方法
        function progressFunction(evt) {
            var progressBar = document.getElementById("progressBar");
            var percentageDiv = document.getElementById("percentage");
            // event.total是需要传输的总字节，event.loaded是已经传输的字节。如果event.lengthComputable不为真，则event.total等于0
            if (evt.lengthComputable) {//
                progressBar.max = evt.total;
                progressBar.value = evt.loaded;
                percentageDiv.innerHTML = Math.round(evt.loaded / evt.total * 100) + "%";
            }
            var time = document.getElementById("time");
            var nt = new Date().getTime();//获取当前时间
            var pertime = (nt-ot)/1000; //计算出上次调用该方法时到现在的时间差，单位为s
            ot = new Date().getTime(); //重新赋值时间，用于下次计算
            var perload = evt.loaded - oloaded; //计算该分段上传的文件大小，单位b
            oloaded = evt.loaded;//重新赋值已上传文件大小，用以下次计算
            //上传速度计算
            var speed = perload/pertime;//单位b/s
            var bspeed = speed;
            var units = 'b/s';//单位名称
            if(speed/1024>1){
                speed = speed/1024;
                units = 'k/s';
            }
            if(speed/1024>1){
                speed = speed/1024;
                units = 'M/s';
            }
            speed = speed.toFixed(1);
            //剩余时间
            var resttime = ((evt.total-evt.loaded)/bspeed).toFixed(1);
            time.innerHTML = '，速度：'+speed+units+'，剩余时间：'+resttime+'s';
            if(bspeed==0) time.innerHTML = '上传已取消';
        }
    </script>
</head>
<body>
<progress id="progressBar" value="0" max="100" style="width: 300px;"></progress>
<span id="percentage"></span><span id="time"></span>
<br /><br />
<input type="file" id="file" name="myfile" />
<input type="button" onclick="UpladFile()" value="上传" />
<input type="button" onclick="cancleUploadFile()" value="取消" />
</body>
</html>
```

## uuid
也叫guid，全球唯一标识符
一切协议都是rfc，uuid协议是rfc4122
node中uuid模块
v1: 使用的时间戳
v3: 有命名空间，但同一台服务还是会重复
v4: 加入随机数的概念
v5: 加入加密hash值

## web性能负载
并不是对cpu的负载
- 是对内存的使用
- 对IO管理
- 对网络的使用

## blob 和arrayBuffer的区别
- arrayBuffer更贴近于array，本质上是一个array，是用array存储的二进制数据
- blob是一个块，本质上是一个数据

## npm淘宝镜像源
npm install -g cnpm --registry=https://registry.npm.taobao.org
npm/cnpm
cnpm init

- -D: --save-dev  开发环境需要的模块
- -S: --save 生产环境需要的模块


get/post/file

## 问题：
1.现在：会等到所有数据都到达了才开始处理
  更好：收到一部分就解析一部分          极大节约内存
2.fs.readFile
  fs.writeFile

```
http.createServer((req, res)=>{
  fs.readFile(`www${req.url}`, (err, data)=>{
    res.write(data);
  });
});
```
readFile先把所有数据全读到内存中，然后回调：
1.极其占用内存
2.资源利用极其不充分


## 流：
读一点、发一点
1.读取流     fs.createReadStream、req
2.写入流     fs.createWriteStream、res
3.读写流     用处: 压缩、加密
```
const fs = require('fs');
const rs = fs.createReadStream('1.png');
const ws = fs.createWriteStream('2.png');
rs.pipe(ws); // 从1流入2
```

## 响应服务器
```
const http = require('http');
const fs = require('fs');
const zlib = require('zlib');

const server = http.cerateServer((req, res) => {
    const rs = fs.cerateReadStream(`www${req.url}`);
    res.setHeader('content-encoding', 'gzip');
    const gz = zlib.createGzip();
    rs.pipe(gz).pipe(res);
    rs.on('error', err => {
        res.setHeader(404);
        res.write('Not Found');
        res.end();
       console.log('读取失败')
    })
    rs.on('finish', err => {
       console.log('写入完成')
    })
}).listen(8080)
```
所有个流上都有个on事件

## zlib
压缩功能
```
const zlib = require('zlib');
const fs = require('fs');
const rs = fs.cerateReadStream('jquery.js');
const ws = fs.cerateWriteStream('jquery.js.gz');
const gz = zlib,createGzip();
rs.pipe(gz).pipe(ws);
ws.on('error', (err) => {
    console.log('失败');
})
ws.on('finish', () => {
    console.log('完成')
})
```
服务端压缩成gzip需要设置响应头，content-encoding: gzip, 否则无法加载。

面向字节的设备: 一个一个字节输入
面向流的设备: 网卡，一块数据


