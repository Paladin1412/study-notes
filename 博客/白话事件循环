## 事件环
1. 浏览器事件环
2. node事件环

#### 浏览器的事件循环
js主线程单线程执行的，遇到异步任务，如ajax和setTimeout等在浏览器中会多开一条线程。将异步任务放在新开的线程中，然后继续执行当前的任务线程，待当前线程执行完毕，再去检查异步线程是否需要执行。总结起来就是代码从上到下执行，会先执行同步代码，待同步代码执行完毕再执行异步代码。
一般会将程序代码划分为宏任务(mac)和微任务(mic);

#### 浏览器常见的几种任务类型
- setImmediate
宏任务，立即执行定时器，不可设置时间，只有IE实现了功能。

```
setImmediate(function() {
    console.log('立即执行定时器，不可以设置时间')
})
```
- MutationObserver
微任务，监控dom变化，dom变化了就会执行, 等待所有代码都执行完，才执行该监控
```
const observer = new MutationObserver(() => {
    console.log('节点已经更新');
    console.log(document.getElementById('app').children.length);
});
observer.observer(document.getElementById('app'), {
    'childList': true,
});
for (let i = 0; i < 20; i++) {
    document.getElementById('app').appendChild(document.createElement('p'));
}
for (let i = 0; i < 20; i++) {
    document.getElementById('app').appendChild(document.createElement('span'));
}
```

- MessageChannel 
宏任务，消息通道, 兼容性不太好,
```
const channel = new MessageChannel();
// 在端口号上添加消息, 发送消息
channel.port1.postMessage('我爱你');
// 注册接收事件, 后绑定的接收函数，还是可以接收的到，所以可以看出是异步执行
channel.post2.onmessage = function(e) {
    console.log(e.data);
};
console.log('hello'); // 先走的hello，后出现我爱你.
```

1. 常见的宏任务:
setTimeout, MessageChannel, postMessage, setImmediate

2. 常见的微任务
MutationObserver， Promise.then

#### EventLoop
事件队列
```
setTimeout(() => {
    console.log('timeout');
}, 0);
Promise.resolve().then(data => {
    console.log('then');
});
console.log('start');
```
常见异步Api
ajax
setTimeout
async Api

队列: 先进先出
栈: 先进后出

主线任务从上向下执行，遇到异步任务的时候会执行，但是不会立即调用，宏任务会放在缓存中，微任务会放在微任务队列中。

主栈执行完成之后，执行微任务队列，先进入的微任务，先执行。

异步的宏任务时间到达之后，会放入宏任务队列中，开始执行。

执行顺序:
先执行同步，再执行微任务，等待宏任务是否到达时间，到达时间再执行。

```
setTimeout(() => {
    console.log('timeout1');
    Promise.resolve().then(data => {
        console.log('then1');
    });
}, 0);

Promise.resolve().then(data => {
    console.log('then2');
    setTimeout(() => {
        console.log('timeout2');
    }, 0);
});

// then2 timeout1 then1 timeout2
// 异步宏任务队列中，如果有多个，会取出一个异步宏任务，执行完毕，清空一次微任务，再去取异步宏任务，并非一次取出所有到执行时机的异步宏任务

```


#### 小测试
```
// 1.
const p = new Promise(function(resolve, reject){
    reject();
    resolve();
});
p.then(function() {
    console.log('成功');
}, function() {
    console.log('失败');
});
// 失败，因为成功和失败只会执行一个

// 2.
const promise = new Promise((resolve, reject) => {
    console.log(1);
    resolve();
    conosl.log(2);
});
primise.then(() => {
    console.log(3);
});
// 1， 2， 3

// 3.
Promise.resolve(1).then(res => 2).catch(err => 3).then(res => console.log(res));
// 2, 因为返回的是resolve，所以会走入成功，成功返回了2，会走后面的then而不是catch

// 4.
Promise.resolve(1)
.then((x) => x + 1)
then(x => { throw new Error('My Error')})
.catch(() => 1)
.then(x => x + 1)
.then(x => console.log(x))
.catch(console.error);
// 2，then中抛出异常，会走入catch，catch有返回值，会进入后面的then，then中输出2，所以不会走入后面的catch

// 5.
setTimeout(function() {
    console.log(1);
}, 0);
new Promise(function(resolve) {
    console.log(2);
    for (var i = 0; i < 10; i++) {
        i == 9 && resolve();
    }
    console.log(3);
}).then(function() {
    console.log(4);
});
console.log(5);
// 2， 3， 5， 4， 1

// 6.
async function async1() {
    conosle.log('async1 start');
    await async2();
};
async function async2() {
    console.log('async2');
}
console.log('scripy start');
setTimeout(function() {
    console.log('setTimeout');
}, 0);
async1();
new Promise(function(resolve) {
    console.log('promise1');
    resolve();
}).then(function() {
    conosle.log('promise2');
});
console.log('script end2');
// script start，async1 start，async2， promise1，script end2，promise2， setTimeout

// await xxx(); 会立即执行，相当于promise函数中的内容，await下一行及后面的内容，才相当于在then中

```


## node的事件循环
- 微任务概念（promise.then  process.nextTick）只要队列发生切换时就会执行微任务

```
process.nextTick(function() {
    console.log('nextTick');
});
Promise.resolve().then(function() {
    console.log('then');
});
// nextTick, then 由此得出，nextTick比promise.then先执行
```
- 主执行栈
- timers 时间 settimeout的回调
- poll 轮训 i/o回调， fs.readFile(); 等待时间到达
- check setimmediate 方法

默认代码会从上到下依次执行(主栈 ~ check)，如果代码执行到poll发现check阶段没有 那就在poll中等待时间到达后再清空代码
```
setTimeout(() => {
    console.log('timeout');
});
console.log('start');
process.nextTick(() => {
    console.log('nectTick');
});
Promise.resolve().then(data => {
    console.log('then')';
});
// start nextTick then timeout , 微任务会在队列切换的时候执行，start队列切换到定时器队列时，中间插入了nextTick和then

setTimeout(() => {
    console.log('timeout1');
    process.nextTick(() => {
        console.log('nextTick2');
    });
});
console.log('start');
process.nextTick(() => {
    console.log('nextTick1');
    setTimeout(() => {
        console.log('timeout2');
    });
});
// start nextTick1 timeout1 timeout2 nextTick2; node 10版本
// start nextTick1 timeout1 nextTick2 timeout2; node 11 尽量和浏览器表现相同

```

time 和 check
```
setImmediate(() => { // check
    console.log('setImmediate');
});
setTimeout(() => { // timer
    console.log('setTimeout');
});

// setImmediate setTimeout, 执行到timer的时候没到时间，所以执行到了check
```
切换队列，把队列清空 如果执行了很多个回调 超过了最大限制 也会切换队列

面试题
```
let fs = require('fs');
fs.readFile('./name.txt', 'uft8', () => {
    setImmediate(() => {
        console.log('setImmediate');
    });
    setTimeout(() => {
        console.log('setTimeout');
    })
});
// setImmediate，setTimeout; 因为IO是poll阶段，下一个阶段是check，所以一定会执行setImmediate，最后再回到timers;
```
node 11 有更新 宏任务执行一个就会执行微任务，更加贴近浏览器，待验证。
