1. node 中模块化的实现
node在所有的模块外侧包了一层函数，假设我们手动让node的第一行报错，比如在js中第一行书写如下代码
```
console.log(window);
```
通过node执行该文件，会发现报错信息如下。
请使用系统控制台执行命令
```
(function (exports, require, module, __filename, __dirname) { console.log(window);
                                                                          ^

ReferenceError: window is not defined
    at Object.<anonymous> (/Users/choice/Desktop/node/main.js:1:75)
    at Module._compile (internal/modules/cjs/loader.js:689:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:700:10)
    at Module.load (internal/modules/cjs/loader.js:599:32)
    at tryModuleLoad (internal/modules/cjs/loader.js:538:12)
    at Function.Module._load (internal/modules/cjs/loader.js:530:3)
    at Function.Module.runMain (internal/modules/cjs/loader.js:742:12)
    at startup (internal/bootstrap/node.js:279:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:752:3)
```

可以发现, 函数中包含exports, require, module, __filename, __dirname参数

node 实现模块化, 特点: 命名冲突，代码方便维护，方便协作
浏览器中实现模块化 var obj = {}; 不能完全解决命名冲突，调用过长，单例
自执行函数实现 seajs cmd requirejs amd (异步)
commonjs规范，通过文件读取，(utf8)实现了模块化

```
let a = (function() {
    module.exports = Promise;
    return module.exports;
})();
```
文件就是模块，每个模块外面会自动套一个函数，并且定义了导出方式 module.exports, exports;
定义了导入方式， require


代码
