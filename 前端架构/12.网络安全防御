- 密码强化
- 人机识别
- https
- 浏览器安全机制
- csp(Content-security-Policy)

### 密码安全
- 泄露渠道
数据库被偷
服务器被入侵
通讯被窃听
内部人员泄密
其他网站(撞库)
- 防御
严禁明文存储
单向变换
变换复杂度要求
加盐(防解析)

哈希算法
明文-密文: 一一对应
雪崩效应: 明文小幅度变化，密文剧烈变化
密文-明文无法反推
密文固定长度 md5 sha1 sha256

两次MD5是否可取？
不可以，组合规律较少，依旧容易破解

只加盐好不好？
md4(salt + 'abcd@#4@56563' + password)
并不好,容易泄密，所以分成很多段，交给不同的人管理，进入数据库时再组合，中间字符串的作用，增加安全性

盐泄露是否会泄露密码？
不会泄露密码。

盐和字符串泄露，密码是否可以反推？
如果密码过于简单会被反推。

密码传输安全
https传输
频次限制
前端加密意义有限-传输层加密，不会泄露，但不代表不能登录

摘要加密的复杂度
md5反查

### 人机验证 与 验证码
- 验证码
1. 前端发送验证码请求
2. 服务生成背景抠图，保存随机抠图位置坐标
3. 滑动距离值
4. 风控信息，滑动行为，页面行为，判断是人为操作还是机器操作，人的行为需要符合正态分布
5. 风险处理

### https

traceroute www.baidu.com; 使用该命令访问百度

http的弱点
窃听 密码敏感信息
篡改 插入广告 重定向到其他网站(JS 和 Head头)

时代趋势
目前全球互联网正在向https迁移
chrome和火狐浏览器将对不采用https加密的网站提示不安全
苹果要求所有app通信都必须采用https加密
小程序强制要求服务器端使用https请求

特点:
保密性 防泄密
完整性 放假冒
真实性 防篡改

http + ssl = https

什么事ssl证书
ssl证书由浏览器中收信人的根证书颁发机构，在验证服务器身份后颁发，具有网站身份验证和加密传输双重功能

### 密码学
- 对称加密
加密和解密使用相同的密钥，常用的是DES
对称加密的一大缺点是密钥的管理与分配，换句话说，如何把密钥发送到需要解密你的消息的人的手里是一个问题，在发送密钥的过程中，密钥有很大的风险呗黑客们拦截，现实中通常的做法是将对称加密的密钥进行非对称加密，然后传送给需要的人。

- 非对称加密
1. 产生一对密钥
2. 公钥负责加密
3. 私钥进行解密
4. 私钥无法解开说明公钥无效-抗抵赖
5. 计算复杂对心梗有影响，极端情况下1000倍
常见算法 RSA Elgamal, 背包算法，Rabin，D-H, ECC

ssh 登录原理
生成公钥
ssh-keygen -t rsa -P ""
查看公钥
cat .ssh/id_rsa.pub
将公钥拷贝到服务器
scp ~/.ssh/id_rsa.pub root@192.168.x.xxx:/root
将公钥加入信任列表
cat id_dsa.pub >> ~/.ssh/authorized_keys

原理:
客户端发送验证请求
服务器产生随机数，使用公钥进行加密
客户端用私钥解密得到随机数，发给服务器
服务器验证正确后同意登录

网站如何通过加密和用户安全通讯
浏览器发送给服务器一个https请求
服务器返回证书+公钥
浏览器向第三方验证证书是否有效
第三方返回验证结果
浏览器向服务器发送用公钥加密的对称密钥
服务器通过对称密钥和浏览器进行通信

证书过程
1. server端通过加密算法生成一对密钥，把公钥发给CA，申请数字证书
2. CA 审核后，生成数字证书，并发回给Server端
3. TCP三次握手
4. 客户端发送给服务器http报文请求并协商使用哪种加密算法
5. 服务器响应报文并把自身的数字签名发给客户端
6. 客户端下载CA的公钥验证Server的身份
7. 客户端获得Server的公钥，生成一个随机对称密钥，用该密钥加密要发送的URL链接申请，再用Server端的公钥加密密钥
8. 客户端发送加密的密钥和加密的URL链接申请
9. 服务器使用自身的私钥解密，获得一个对称密钥，再用该对称密钥解密经过加密的URL链接，获得URL链接申请
10. 服务器根据URL链接申请获得网页，并用客户端发来的对称密钥把该网页加密后发给客户端
11. 用自身对称密钥解密，获得网页内容
12. TCP四次挥手

证书分类
入门级DVSSL- 域名有效，无门槛
企业级OVSSL- 企业资质，个人认证
增强型EVSSL- 浏览器给予绿色地址栏显示公司名称

### 配置证书
阿里云 - ssl证书 - 下载
一般选择赛门铁克证书

server {
    listen 443;
    server_name localhost;
    ssl on;
    root html;
    index index.html index.htm;
    ssl_certificate 证书的值
    ssl_certificate_key 证书的公钥
    ssl_session_timeout 5m;
    ssl_siphers
}

### helmet 中间件
增强安全性。添加请求头
```
npm i koa-helmet -s;

const Koa = require('koa');
const helmet = require('koa-helmet');
const app = new Koa();
app.use(helmet());
app.use((ctx) => {
    ctx.body = "hello word";
});
app.listen(8080);
```
Strict-Transport-Security: 强制使用安全连接(SSL/TLS之上的HTTPS)来连接到服务器
X-Frame-Optons: 提供对于点击劫持的保护
X-XSS-Protection: 开启大多现代浏览器内建的对于跨站脚本攻击XSS的过滤功能
X-Content-Type-Options: 防止浏览器使用MIME-sniffing来确定响应的类型，转而使用明确的content-type来确定
Content-Security-Policy: 防止受到跨站脚本攻击以及其他跨站注入攻击