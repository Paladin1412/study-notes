### webpack
webpack-cli 工具
npx 是webpack带的命令工具，使用npx运行webpack会使用项目node_module中的webpack
```
npx webpack -v
npx webpack index.js // 打包
```
webpack 默认只认识js模块，而且只支持模块语法。
如果用require引入，要用module.exports = a;
如果用import 引入，可以使用 default export a;

npm info webpack; // 查看webpack历史版本
npm install webpack@4.12.0 --D; // -D === --save-dev

loader顺序，从右到左，从下到上;
postcss-loader: 添加兼容版本
css-loader: 把多个css整合
style-loader: 把css挂在html上

sourceMap：源代码与打包后代码的映射关系，不同的设置值会影响配置

devServer：服务器
devServer: {
    contentBase: "./dist",
    open: true, // 自动打开浏览器
    proxy: { // 代理
        '/api': {
            target: 'http://localhost'
        }
    },
    hot: true, // 开启html热替换 hmr
    hotOnly: true // 不刷新浏览器
}
hmr 热替换，需要在plugins中引入
plugins: [
    new webpack.HotModuleReplacementPlugin()
]
需要使用style-loader, 不能使用mini提取css

js的hmr, 使用module.hot
```
if (module.hot) {
    module.hot.accept('./number', () => {
        console.log('变化了');
    })
}
```

babel：
```
loader: "babel-loader",
options: {
    presets: [
        "@babel/preset-env",
        {
            targets: {
                edge: "17",
                firefox: "60",
                chrome: "67",
                "safari": "11.1"
            },
            useBuiltInt: "useage", // 按需注入
        }
    ]
}
```

polyfill, 会把js注入到全局变量中，污染全局，适合在项目中，不适合在插件和工具库中使用
plugin-transform-runtime: 闭包的注入方式，不会影响全局，适合工具库
```
npm i @babel/plugin-transform-runtime --save;
npm i @babel/runtime --save;

loader: "babel-loader",
options: {
   plugin: ["@babel/plugin-transform-runtime", {
       corejs: 
   }]
}

```

### Loader
```
npm init -y;
npm install webpack webpack-cli -D;
```