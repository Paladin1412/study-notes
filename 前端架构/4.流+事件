### Buffer类
缓存，二进制 将二进制保存成了16进制
new Buffer不要使用，应被废弃了
- utf8(3个字节) gbk/gb2312(2个字节)

```
const buffer = Buffer.from("哈哈");
console.log(buffer); // 可以看出打印出6个字节
console.log(buffer.toString()); // 转换成string
```
iconv-lite 把二进制gb 准混成utf8

console.log(buffer.toString('base64')); // buffer转换成base64
二进制 11111111 一个字节有八位 377 十六进制 ff

base64: 一切能放路径的地方，都可以使用base64
一个汉字是3个字节，24个位， 3 * 8 = 4 * 6 变成四个字节
```
const r = Buffer.from("珠");
r.toStrong('base64'); // 54+g   e7 8f a0

// 将每个字节转为二进制
(0xe7).toString(2); // 11100111
(0x8f).toString(2); // 10001111
(0xa0).toString(2); // 10100000
// 00111001 00111000 00111110 00100000 // 6个一组，补齐8位
// 
parseInt('00111001', 2); // 二进制变为10进制 57
parseInt('00111000', 2); // 二进制变为10进制 56
parseInt('00111110', 2); // 二进制变为10进制 62
parseInt('00100000', 2); // 二进制变为10进制 32

// base64编码
const str = 'ABCDEFGHIGKLMNOPQRSTUVWSYZ';
str += str.toLowerCase();
str += '0123456789+/';

str[57] + str[56] + str[62] + str[32]; // 54+g

```

base64转移步骤
1、获取buffer，并将每个16的buffer字节转为2进制
2、将所有二进制拼接在一起，6个一组进行划分，在前面补00，凑成8位二进制
3、将新的二进制转换成10进制
4、在base64集合中分别通过10进制下标取出，并链接

### BUffer的声明方式
```
const buffer1 = Buffer.from("哈哈");
const buffer2 = Buffer.alloc(3); // 字节个数
const buffer3 = Buffer.from([255, 255, 255]);
console.log(buffer1, buffer2, buffer3);
```
### Buffer 中常见的方法
- 数组的方法, forEach, slice, 
```
buffer.forEach(b => {
    console.log(b);
})
```
- buffer 一旦声明，就不能再增加长度， copy + concat + split
```
const b1 = Buffer.from("珠");
const b2 = Buffer.from("峰");
// const big = Buffer.alloc(6);
// b1.copy(big, 0, 0 ,3);
// b2.copy(big, 3, 0, 3);
const big = Buffer.concat([b1, b2]);
```
### Node模块
- 发布订阅模块, 时间发射器
```
const EventEmitter = require('events');
const e = new EventEmitter();
e.on('eat', function(data) {
    console.log('eat1', data);
});
e.on('eat', function(data) {
    console.log('eat2', data);
});
e.on('eat', function(data) {
    console.log('eat3', data);
});

e.emit('eat', '1');
```
自己实现一个

```
class EventEmitter {
    constructor() {
        this._events = {};
    }
    on(eventName, callBack) {
        if (this._events[eventName]) {
            this._events[eventName].push(callBack);
        } else {
            this._events[eventName] = [callBack];
        }
        
    }
    emit(eventName) {
        this._events[eventName].forEach(fn => {
            fn();
        })
    },
    off(eventName, callBack) {
        this._events[eventName] = this._events[eventName].filter(fn => fn !== callBack)
    }
}

```

### 流文件读取
```
const fs = require('fs');
const path = require('path');
const rs = fs.createReadSteam(path.resolve(__dirname, 'name.txt'), {
    flags: 'r', // r w 读和写权限
    highWaterMark: 4, // 每次预计读取多少个
    encoding: null,
    autoClose: true, // 读取完毕，关闭文件
    start: 0,
    end: 5 // slice(start, end) 包含end的
})
// 流 默认流是暂停模式，非流动模式，内部会监控你有没有监听data事件 rs.emit('data', 123);
const arr = [];
rs.on('data', function(chunk) {
    arr.push(chunk);
    rs.pause(); // 暂停data事件的触发  rs.play(); 继续
});
rs.on('end', function() {
    console.log(Buffer.concat(arr).toString()); // 读取完毕
});

rs.on('error', function(error) {
    console.log(error);
})
```

### 跨域
```
const xhr = new XMLHttpRequest();
xhr.open('PUT', 'http://127.0.0.1:3000/userlist', true);
xhr.resopnseType = 'json';
document.cookie = 'token=100';
xhr.withCredentials = true; // 跨域不允许携带cookie，设置强制携带，需要要求服务端设置的允许域名不能为*
xhr.setRequestHeader('token', 'asd.askfs.g'); // 设置请求头
xhr.onreadstatechange = function() {
    if (xhr.status === 200 && xhr.readyState === 4) {
        
    }
}
xhr.send();
```
服务端
```
res.setHeader('Access-Control-Allow-Origin', 'http://127.0.0.1:5500'); // 允许跨域的域名
res.setHeader('Access-Control-Allow-Methods', 'GET,PUT,DELET,OPTIONS,POST');
res.setHeader('Access-Control-Allow-Headers', 'Content-type,token'); // 允许携带的请求头
res.setHeader('Access-Control-Max-age', 10); 允许权限测试的缓存时间，单位秒，options的发送间隔
res.setHeader('Access-Control-Allow-Credentials', true); // 允许跨域写到cooke
```

### localStorage sessionStorage cookie 区别
localStorage: 本地存储，每个网站最大5m，一直存，不能跨域，存储在浏览器中
sessionStorage: 不关闭浏览器就存活
cookie: 浏览，每次请求时，会带上cookie，做注册登录(cookie存放不敏感信息)
session: 比较安全,内容存放在服务器，session是基于cookie
每次请求时 会自动带上cookie, 我可以去通过sssion找到当前账号的对应内容，内存存在服务器了
redis / mongo 存储到数据库中

node设置cookie
res.setHeader('Set-Cookie', ['name=1', 'age=2']);

### ejs
使用
```
const ejs = require('ejs');
const fs = require('fs');
const path = require('path');
const data = { name: 'yd', age: 18 };
const template = fs.readFileSync(path.resolve(__dirname, 'index.ejs'), 'utf-8');
const str = ejs.render(template, data);
console.log(str);
```

```html
<div>
<%=name%>  
<%=age%>
</div>
```

### 实现解析
```
function render(template, data) {
    return template.replace(/<%=([\s\S])%>/g, function() {
        return data[arguments[1]];
    })
}
```

复杂一点的代码
```html
<div>
<%arr.forEach(a => {%>
    <li><%=a%></li>
<%})%>
</div>
```

```
function render(template, data) {
    template = template.replace(/<%=([\s\S]*?)%>/g, function() {
        return '${' + arguments[1] + '}';
    })
    let head = 'let str;\r\nwith(data){\r\n';
    head += 'str=`';
    const content = template.replace(/<%([\s\S]*?)%>/g, function() {
        return '`\r\n' + arguments[1] + '\r\nstr+=`';
    });
    const tail = '`\r\n}\r\nreturn str;';
    const fn = new Function('data', head + content + tail);
    return fn(data);
}
```