前端常见问题
修改js模块功能，其它模块也受影响，很难快速定位bug
多人开发代码越来越难以维护，不方便迭代，代码无法重构

什么是单元测试？
单元测试就是测试最小单元(一个方法，一个组件)

### TDD & BDD
- test-dirven development 测试驱动开发
先编写测试用例代码，然后针对测试用例编写功能代码，使其能够通过
很好的诠释了代码既文档
清晰地了解软件的需求
- Behavior Driven development 行为驱动开发
系统业务专家，开发者，测试人员一起合作，分析软件的需求，然后将这些需求写成一个个的故事，开发者负责填充内容
保证程序实现效果与需求一致

### 测试工具
- mocha
测试框架
- chai/jest
断言库

karma + jasmine + chrome-launcher
karma + mocha + chai/jest 使用jsdom

Karma 为前端自动化测试提供了跨浏览器测试的能力，Mocha是前端自动化测试框架，测试框架需要解决兼容不同风格断言
facebook推出的一款测试框架，集成了Mocha, chai,jsdom,sinon等功能。

测试文件的名字一般和要测试的文件名称一致，后缀名一般叫xxxx.spec.js

下面是一个简单的测试用例
``` test.spec.js
// 使用mocha + chai
import { parser, stringify } from '../src/test.js';
import { expect } from 'chai';
// it: 一个用例
// expect 期望
it('我要测试parser 是否可靠', () => {
    // parser('name=zfpx');
    // expect(parser('name=zfpx')).to.be.equal({name:'zfpx'}); // 期望是否相等
    expect(parser('name=zfpx')).to.be.deep.equal({name:'zfpx'}); // 对象判断需要使用deep，否则对象无法判断相等
});
```

```
it('我要测试stringify', () => {
    expect(stringify({name: 'zfpx'})).to.be.equal('name=zfpx');
})
```

### 用例分类
describe, 给用例外面添加一个套件
```
describe('测试parser', () => {
    it('我要测试parser', () => {
        expect('name=zfpx').to.be.deep.equal({name: ''zfpx});
    })
    it('我要测试parser', () => {
        expect('name=zfpx').to.be.deep.equal({name: ''zfpx});
    })
    it('我要测试parser', () => {
        expect('name=zfpx').to.be.deep.equal({name: ''zfpx});
    })
});

describe('测试stringify', () => {
    it('我要测试stringify', () => {
        expect(stringify({name: 'zfpx'})).to.be.equal('name=zfpx');
    })
    it('我要测试stringify', () => {
        expect(stringify({name: 'zfpx'})).to.be.equal('name=zfpx');
    })
    it('我要测试stringify', () => {
        expect(stringify({name: 'zfpx'})).to.be.equal('name=zfpx');
    })
})

```

### 常见的关系
- 相等
- 大于/小于
- 包含
- 不包含

```
describe('测试方法', () => {
    it('相等关系', () => {
        expect(1+1).to.be.equal(2); // 数字
        expect([1,2,3]).to.be.lengthOf(3); // 数组长度
        expect(true).to.be.true; // 布尔值
    });
    it('包含关系', () => {
        expect('zfpx').to.be.contain('zf'); // 包含
        expect('zfpx').to.be.match(/zf/); // 匹配
    });
    it('大于 小于', () => {
        expect(5).to.be.greaterThan(3); // 是否大于3
        expect(5).to.be.lessThan(5); // 小于5
        expect(3).to.be.not.greaterThan(10); // 不大于10
    })
});
```

### 测试UI
```
describe('hello word', () => {
    it('传递属性后能否显示结果', () => {
        // 原生自己测试Vue
        // extend 方法可以根据实例创建一个类
        const BaseExtend = Vue.extend(HelloWorld);
        // 把组件进行挂载
        // vm.$el mocha 测试的时候集成了jsdom
        const new BaseExtend({
            propsData: { msg: 'hello' }
        }).$mount();
        expect(vm.$el.querySelector('h1').innerHTML).to.be.contain('hello');
    })
});
```
简便写法
引入 @vue/test-utils
```
import { mount } from '@vue/test-utils';

describe('Hello world', () => {
    it('test 和 it一样，用哪个都可以，看支持哪个', () => {
        const wrapper = mount(HelloWorld, {
            propsData: { msg: 'hello'}
        });
        // wrapper.setProps({
        //     msg: 'hello'
        // })
        expect(wrapper.find('h1').text()).to.be.contain('hello');
    })
    
})

```

### 点击事件
```
import { expect } from 'chai';
import {mount} from '@vue/test-utils';
import Counter from '../src/Counter';

describe('测试组件', () => {
    it('测试点击按钮', () => {
        const wrapper = mount(Counter);
        expect(wrapper.find('#count').text()).to.be.equal('10');
        wrapper.find('button').trigger('click');
        expect(wrapper.find('#count').text()).to.be.equal('11');
        // wrapper.find('button').exists();
        // wrapper.find('button').isVisible;
    })
})
```

### 事件测试

