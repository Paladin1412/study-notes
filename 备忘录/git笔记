git使用

Svn是集成式管理方式
Git是分布式管理方式

Svn需要准备一个中央服务器，每台电脑需要连接中央服务器才能进行开发

首次拉取项目
git clone 地址
设置当前登录的用户名和邮箱
git config - -global user.name “用户名”
git config --global user.email “邮箱地址”
Git三个区:
工作区:
暂存区:
版本库:

查看当前文件修改状态
git status

提交
git add 文件名字

提交所有修改
git add . —all

将本地代码放到暂存区
git commit -m “添加注释”
add和commit连着写
git commit -a -m “注释”

对比 工作区和暂存区
git diff

暂存区和版本库的对比
git diff —cached(staged)
对比 工作区和版本库
git diff master

撤销
git reset HEAD <file>  从暂存区撤回到工作区
git checkout — <file> 将工作区的修改删除，同步暂存区或版本库
git commit -m “注释” —amend:  用当前的注释替换掉上次的注释

查看提交记录
git log

删除
git rm <file> 工作区手动删除后运行命令会将暂存区也删掉
git rm -f <file> 工作区和暂存区都删除
git rm —cached <file> 只将暂存区删除

恢复
git checkout commit.id <file> 恢复到指定节点的文件
git reset —hard commit.id 将所有文件恢复到指定commit
git reset —hard HEAD^ 向前返回一个版本，运行几次返回几次
git reset —hard HEAD~2 向前返回两个版本 后面数字随意写
git reflog: 记录操作行为
git reset —hard reflog.id 恢复到哪个操作

同步到远程仓库
Git remote: 查看远程仓库的名字
git remote -v 查看名字对应的远程地址
git remote -add: 修改远程仓库名字
Git push origin master: 提交到master

多人协作
Git hub用户名顶部的+号-》New collaborator -》输入用户名-》 add collaborator: 添加开发人员
第二个人 clone 代码后，设置用户名和邮箱

同步代码
git pull 拉取远端代码，自动合并 省去了merge的过程
git fetch 拉取远端代码，不自动合并，需要手动merge
git diff master origin master: 对比不同
git merge origin/master

开源项目协作
1、fork
2、修改提交
3、项目主页->pull request -> new pull request -> 从我的到对方的 -》 create pull  request -> 填写留言 -> 干了什么事 -> 点击提交

分支处理
git branch: 查看本地分支
git checkout 分支号   切换分支
git checkout -b 分支号 新建分支
git merge 分支号    将指定分支合并到当前所在分支
git branch —merged:  查看当前分支合并了哪些分支
git branch —no-merged: 显示没有合并的分支
git branch -d 分支号: 删除分支，只能删除被合到master的分支
git bracnh -D 分支号: 强制删除分支

releases: 打标签
git tag: 查看标签
git tag v1.0 打好标签v1.0
git push origin v1.0: 将标签同步到github   标签就是里程碑

contributors: 参与者

创建组织:
创建博客:

设置别名:
git config —global alias.co checkout : 使用co代替checkout

git.oschin.net/progit: git学习网站


项目发布
1、git tag publish/1.2.2 
2、git push -u origin publish/1.2.2 

// 撤回
git reset —soft HEAD^ 撤回commit操作注释
git checkout 分⽀支或⽂文件名 
然后 pull下来

tnpm owner add 添加发布权限

