强制转换
```
(bool)$a; 
(int)$a; 
(string)$a;
```
自动转换
```
echo  10 + "20px"; // 30
```
0, 0.0, "", "0", array(), null 都为假，资源类型恒为真。

整型转换
```
echo(int)"10px"; // 10;
echo(int)10.98; // 10;
echo(int)true; // 1;
echo(int)false; // 0;

```

字符串转换
```
echo(string)true; // "1";
echo(string)true; // "";
echo(string)null; // "";
```

在php中，字符串连接使用点
```
echo "我是: " . "feiyang"; // "我是: feiyang"
```

比较运算符

==, === 和js相同

```
10 == "10px"; // true 此处与js不同
```
运算符优先级
特殊 > 算数 > 比较 > 逻辑 > 赋值

特殊运算符：[], new, (), !;
算术运算符：++， --， (int), (float), (string), (bool), (array), *, /, %, +, -, .
比较运算符：>, <, >=, <=, ==, !=, ===, !==
逻辑运算符：&&, ||, ?;
赋值运算符：=, +=, -=, *=, /=, %=, .=;

数组:
```
$arr = array(1,2,3,4,5);
```
- 枚举数组
    枚举数组的下标是从0开始的正整数，$arr[0] ===> 1;
- 关联数组
    关联数组的下标是字符串
```
$arr = array("name"=>"feiyang", "sex" => "男");
echo $arr["name"];
print_r($arr); // 遍历数组
```
- 混合数组
    数组的下标既有整数也有字符串
```
$arr = array("name" => "feiyang", "age": 24, 1, 2, 3);
echo $arr[0]; // 1;

$arr = array(0, 1, 2, 5 => 3, 4); // 4的下标为6，下标从最后一个开始递增
```
数组的创建
- 字面量创建
```
$arr = array(0, 1, 2, "name" => "feiyang", 3);
```
- 使用[]创建
```
$arr["name"] = 1; // 使用键值对创建

$arr[] = 1; // 下标自动分配递增
$arr[] = 2; // 下标自动分配递增
```

数组函数:
print_r(): 打印数组信息，如果参数是字符串，整数，则打印本身，打印数组和对象会打印出一定格式
isset() 判断变量是否存在
unset(); 书暗处变量，删除变量名和引用联系，并不能删除内存空间中的值，内存中留下的数据成为垃圾，由windows或php引擎本身自动回收。unset删除了数组中的值，数组长度不变。

```
$a = 123;
unset($a);
if (isset($a)) {
    echo "存在";
} else {
    echo "不存在";
}
```
count(); 数组的有效元素个数，返回值 int
round(value, tofixed); 四舍五入，保留小数位数。
foreach: 遍历数组
```
foreach( $arr as [$key =>] value) {
    var_dump($key, $value);
}
```

### 函数
```
function getMax($a, $b) {
    return $a >= $b ? $a : $b;
}
```
php函数和js中的相同，函数名称不需要添加$

变量作用域:
在php中，全局变量，不能直接在函数内部使用。
全局变量: 在函数外部定义的变量，网页执行完毕消失。
局部变量: 在函数内部定义的变量，函数执行完毕胡消失。
使用 global 生命全局变量
global 关键字只能在函数内部使用;
global 生命和赋值要分离
```
global $name;
$name = "feiyang";
```
global 的真正含义是， "引用传地址";

日期时间函数
- date();
```
date("Y-m-d H:i:s"); 年月日 时分秒
```
- time(): 时间戳，秒数；
```
time();
```