## 微前端的概念
微前端的概念来源于微服务理念，应用于前端，在复杂的大型应用中，分成多个组，可以用不同的框架，独立维护。

特点
技术无关：支持，但不推荐。各个团队都可以自行选择技术栈，不受同一项目中其他团队影响
业务独立：各个交付产物都可以被独立使用，避免耦合
样式隔离：各个交付产物的样式不会污染到其他组件
原生支持：各个交付产物都可以自由使用浏览器原生API，而非要求使用封装后的API

| | 微服务 | 微前端 | 备注 |
| --- | ---- | ---- | ---- |
| 服务| 独立服务，比如交易服务| 应用或者模块，比如导航 | 服务是不会相互影响的 |
| 服务治理 | 服务注册，发现，依赖管理，跟踪，降级，限流，日志，监控，运维 | 应用的发现，路由，监控，降级，运行，注销，聚合等 | 需要一个或多个系统统一处理一些上层的事情 |
| 服务通信 | http/rpc/中间件 | eventBus, sharedWorker,BroadcastChannel,LocalStorge |

常见微前端基本构成

1. 中心化路由，服务注册中心
2. 标识化应用
3. 设计一定的生命周期
4. 部署和配置自动化

主工程 - 应用层(多个[js,css,assets])

主工程的作用
应用的发现和调度转场动画、日报、上报应用、css隔离影响、应用监控、降级、鉴权等应用间通信机制。

如何事实微前端
拆分和聚合
常见的方式
1. 大仓库拆分独立的模块，统一构建
2. 大仓库通过monorepo methodology做成npm包，集成主项目
3. 大仓库拆分子仓库，构建应用出独立的服务，应用, 可用二级目录管理。一般通过iframe聚合。
4. 大仓库拆分多仓库，构建后集成到主应用。主框架动态加载子文件。子仓库打包js，css文件。

常见的技术方案
1. iframe方式进行聚合
2. 使用webComponent构建应用
3. 在不同的框架之上设计通讯，加载机制，诸如Single-SPA

- iframe方式

## 应用场景

## 常见的实现