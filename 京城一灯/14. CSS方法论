## css分层

css有语义化的命名约定和css层的分离，将有助于它的可扩展性，性能的提高和代码的组织管理
大量的样式，覆盖，权重和很多!important, 分好层可以让团队命名统一规范，方便维护。
有责任感的去命名你的选择器。

- SMACSS
base 设定标签越苏的预设值
layout 整个网站的大架构的外观
module 应用在不同页面的公共模块
state 定义元素不同的状态
theme: 画面上所有主视觉的定义，border-color, background
修饰符用-,子元素用__
- BEM
BEM和SMACSS非常类似，主要用来如何给项目命名，一个简单命名更容易让别人一起工作，比如选项卡导航是一个块（Block），这个块里的元素的是其中标签之一，而当前选项卡是一个修饰状态。
block 代表了更高级别的抽象或组件
block__element 代表block的后台，用于形成一个完整的block的整体。
.block--modifier 代表block的不同状态
修饰符使用的是_, 子模块使用__符号。（不用一个-的原因是css单词连接）
- SUIT
- ACSS
原子化的css
考虑如何设计一个系统的接口，院子是床架一个区块的最基本的特质，比如说表单，由于多个表单组件组成，网站由多个模块组成。
- ITCSS

### CSS WorkFlow
css工作流  cascading style sheets

- css预处理
sass, less styles
变量
混合(minxin)extend
嵌套规则
运算
函数
NamesPaces & Accessors
Scope
注释
- css后处理器
css 压缩， clean-css
自动添加浏览器前缀 autoprefixer
css更加美观排序csscomb
reword渠道styles后处理器
前后通吃postcss

### nextcss
https://cssnext.github.io/playground

:root { // 全局变量
    --fontSize: 1rem; // 变量
    --mainColor: #12345678;
    --highlightColor: hwb(190, 35%, 20%)
}

body {
    color: var(--mainColor)
}

:root {
    --centered: {
        display: flex;
        align-items: center;
        justify-content: center;
    }
}
.centered {
    @apply --centered;
}

calc: css表达式
calc(15px * 2);

image-set (
    url(img/test.png) 1x,
    url(img/test-2x.png) 2x
)

filter 滤镜

css正则
[frame=hsides i] { // 忽略hsides大小写

}

使用webpack的css-loader即可编译， 添加modules

使用postcss进行编译css
使用postcss-preset-env 编译cssnext语法

### postcss插件集
postcss-custom-properties 运行时变量
postcss-simple-vars 与scss一致的变量实现
postcss-mixins 实现类似sass的@mixin的功能
postcss-extend 实现类似sass的继承功能
postcss-import实现类似sass的import
cssnext面向未来，cssgrace修复过去，兼容ie6

https://cssdb.org

autoprefixer 已经被继承，不需要用了。

### css-doodle
是一个webcomonent
<css-doodle>
</css-doodle>

### Houdini
css魔术师  js in css

js -> style -> layoout -> paint -> composite

在现今的web开发中，js几乎占据所有版面，除了控制页面逻辑与操作DOM对象外，连css都直接写在js里面了，就算浏览器还没实现的特性，总会有人做出对应的polyfills, 让你快速的将新Feature应用到Production环境中，更别提我们还有Babel等工具帮忙转移。

而css就不同了,除了制定了css标准规范所需的时间外，各家浏览器的版本，实战进度差异更是旷日持久，顶多利用postcss，sass等工具来帮我们转译出浏览器能接受的css，开发者们能操作的就是通过js去空值DOM与CSSOM来影响页面的变化，但是对于接下来的layout，paint与composite就几乎没有控制权了。

为了解决上述问题，为了让css的魔力不再浏览器把持，houdini就诞生了。
css houdini 让开发者能够介入浏览器的css engine

layout 重排
paint 重绘


- Parser, Paint, Layout
允许开发者自由扩展css此法分析器

- Worklets实战

- Properties/ Values

- Typed OM Object

### 使用

worklets的概念和web worker类似，他们允许你引入脚本文件并执行特定的js代码，这样的js代码要满足两个条件，第一，可以在渲染流程中调用，第二，和主线程独立。
worklet脚本严格控制了开发者所能执行的操作类型，这就保证了性能worklets的特点就是轻量以及生命周期较短。

CSS.paintWorklet.addModule('xxx.js');
CSS.layoutWorklet.addModule('xxx.js');
// xxx.js
registerPaint('xxx', class {
    static get inputProperties() {}
    static get inputArguments() {}
    paint(ctx, geom, props) {}
})


### 演示

css:

.el {
    --elUnit: 500px;
    --arcColor: yellow;
    height: var(--elUnit);
    width: var(--elUnit);
    --background-canvas: (ctx, geom) > { // 变量，可以使用函数
        // geom 当前类 .el 所有的信息
        // ctx相当于一个canvas
        ctx.strokeStyle = `var(--arcColor)`;
        ctx.lineWidth = 4;
        ctx.beginPath();
        ctx.arc(200, 200, 50, 0, 2*Math.PI);
        ctx.stroke();
        ctx.closePath();
    };
    background: paint(--background-canvas);
}

需要激活
<script>
CSS.paintWorklet.addModule('./arc.js');
</script>

arc.js:
if (typeof registerPaint !== 'undefined') {
    registerPaint('background-canvas', class {
        static get inputProperties() { // 获取变量
            return ['--background-canvas'];
        }
        paint(ctx, geom,  properties) { // 绘制
            eval(properties.get('--background-canvas').toString())(
                ctx, geom, properties
            );
        }
    })
}

需要放入服务器中, 起个服务进行加载。

js就类似canvas语法，只是不能操作dom;

class Test {
    static get inputProperties() { // 获取变量
        // const a = 123;
        // setTimeout()
        return ['--background-canvas'];
    }
    paint(ctx, geom,  properties) { // 绘制
        eval(properties.get('--background-canvas').toString())(
            ctx, geom, properties
        );
    }
}

registerPaint('background-canvas', Test);

js中的写法
CSS.px(42);  === 42px;

let pos = new CSSPositionValue(
    new CSSUnitValue(5, 'px'),
    new CSSUnitValue(4, 'px')
);

更少的bug，例如数字值总是以数字形式返回，而不是字符串。
el.style.opacity += 0.1, el.style === '0.30.1' // dragons!
算数运算和单位转换， 在绝对长度单位，例如 px-cm之间进行转换并进行进本的数学运算。
数值阀内限制和舍入，typed OM通过对值进行范围限制和舍入，以使其在属性的可接受范围内。
更好的性能，浏览器必须做更少的工作序列化和反序列化字符串值，现在对于CSS值，引擎可以对JS和C++使用相似的理解，Tab Akis已经展示了一些早起的性能基准测试，与使用旧的CSSOM和字符串相比，typed om的运行速度快了大约30%，这对使用requestionAnimationFrame处理快速css动画可能很重要。
crbug.com/808933可以跟踪Blink的更多性能演示。
错误处理，新的解析方法带来了css世界中的错误处理。
不需要猜测名字是驼峰还是字符串，typed OM中的css属性名称始终是字符串，与实际在css中编写的内容一致。


