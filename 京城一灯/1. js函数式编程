## javascript functional programming

### 一. 函数式编程思维
范畴论 Category Theory
1. 函数式编程是范畴论的数学分支，是一门很复杂的数学，认为世界上所有概念体系都可以抽象出一个个范畴。
2. 彼此之间存在某种关系概念，事物，对象等等，都构成范畴。任何事物只要找出他们之间的关系，就能定义。
3. 箭头表示范畴成员之间的关系，正式的名称叫做态射，范畴论认为，同一个范畴的所有成员，就是不同状态的变形，通过态射，一个成员可以变形成另一个成员。

所有成员是一个集合，变形关系是函数

函数式编程基础理论
1. 函数式编程 其实相对于计算机的历史而言是一个非常古老的概念，甚至早于第一台计算机的诞生。函数式编程的基础模型来源于λ演算，而λ演算并非设计于在计算机上执行，他是在20世纪三十年代引入的一套用于研究函数定义，函数应用和递归的形式系统。
2. 函数式编程不是用函数来编程，也不是传统的面向过程编程，主旨在于将复杂的函数复合成简单的函数(计算理论，或者递归论，或者拉姆达运算)，运算过程尽量写成一系列嵌套的函数调用
3. javascript 是披着C外衣的lisp
java c# php js 都是类c语言，就是从c语言演化过来的，copy到c语言中，可以直接运行。
4. 真正的火热是随着React的高阶函数而逐步升温。

用函数编程和函数式编程，借助一些数学的方式，使用js的语法进行开发。
区别: 
用函数式编程的时候，不能写if和else，因为数学中没有if和else，也没有while，就是用数学的思维，使用js语法承接，可以用递归，因为数学有递归。

js中的公民
1. 函数是一等公民，所以一等公民first class，指的是函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。
2. 不可变变量，在函数式编程中，我们通常理解的变量在函数式编程中也被函数代替了，在函数式编程中，变量仅仅代表某个表达式。这里所说的变量是不能被修改的，所有的变量只能被赋一次初始值。
3. map & reduce他们是最常用的函数式编程的方法。

函数式第一等公民，
只用表达式，不用语句，
没有副作用，
不修改状态，
引用透明(函数运行只靠参数)。

### 二. 函数式编程常用核心概念
- 纯函数
如果做函数式编程，函数一定要纯。
1. 对于相同的输入，永远会得到相同的输出，而且没有任何可观察的副作用，也不依赖外部环境的状态。
```
var xs = [1, 2, 3 ,4 ,5];
// Array.slice是纯函数，因为它没有副作用，对于固定的输入，输出总是固定的。
// 下面这个会让变量衰减，所以不是纯函数。
xs.slice(0, 3);
sx.slice(0, 3);
```
lodash是一个纯函数式编程的库
```
import _ from 'lodash';
var sin = _.memorize(x => Math.sin(x));
// 第一次计算的时候会稍慢一点。
var a = sin(1);
// 第二次有了缓存速度极快
var b = sin(1);
```
纯函数不仅可以有效降低系统的复杂度，还有很多很棒的特性，比如可缓存性。

```
// 不纯的
var min = 18;
var checkage = age => age > min;
// 纯的，这很函数式
var checkage age => age > 18;
```
在不纯的版本中，checkage不仅取决于age还有外部依赖的变量min
纯的checkage把关键数组18硬编码在函数内部，扩展性比较差，柯里化优雅的函数式解决。

- 函数的柯里化
传递给函数一部分参数来调用它，让他返回一个函数去处理剩下的参数
我们一起来用柯里化来改变他
```
var checkage = min => (age => age > min);
var checkage18 = checkage(18);

checkage18(20);
```
函数的柯里化code
```
// 柯里化之前
function add(x, y) {
    return x + y;
}
add(1, 2) // 3;

// 柯里化之后
function addX(y) {
    return function(x) {
        return x + y;
    }
}
addX(2)(1); // 3
```
柯里化目的，不让纯函数硬编码，也不让函数和外部有太多依赖。

使用bind实现柯里化
```
function foo(p1, p2) {
    this.val = p1 + p2;
}
var bar = foo.bind(null, 'p1');
var baz = new bar('p2');
console.log(baz.val);
```
上面bind是一个经典的柯里化，

柯里化的优缺点
```
import { curry } from 'lodash';
var match = curry((reg, str) => str.match(reg));
var filter = curry((f, arr) => arr.filter(f));
var havaSpace = match(/\s+/g);
// haveSpace('ffffff');
// haveSpace('a b');
// filter(haveSpace, ['abcdefg', 'hello world']);
filter(haveSpace)(['abcdefg'], 'hello world');
```
事实上柯里化是一种预加载函数的方法，通过传递较少的参数，得到一个已经记住了这些参数的新函数，某种意义上讲，这是一种对参数的缓存，是一种非常高效的编写函数的方法:
 
- 函数组合
纯函数以及如何把它柯里化写出的洋葱代码h(g(f(x)))修复掉, 为了解决函数嵌套的问题，我们需要用到函数组合。
我们一起来用柯里化改他，让多个函数像拼积木一样
```
const compose = (f, g) => (x => f(g(x)));
var first = arr => arr[0];
var reverse = arr => arr.reverse();
var last = compose(first, reverse);
last([1, 2, 3, 4, 5]);
```

函数组合
compose(f, compose(g, h));

compose(compose(f, g), h);

compose(f, g, h);

- Point Free
把一些对象自带的方法转化成纯函数，不要命名转瞬即逝的中间变量。
这个函数中我们使用了str作为我们的中间变量，但这个中间变量除了让代码变得长了一点以外，是毫无意义的。
```
const f = str => str.toUpperCase().split(' ');
```
优化后的代码
```
const toUpperCase = word => word.toUpperCase();
var split = x => (str => str.split(x));
var f = compose(split(' '), toUpperCase);

f('abcd efgh');
```
这种风格能够帮助我们减少不必要的命名，让代码保持简洁和通用。
- 声明式与命令式代码
命令式代码的意思就是，我们通过编写一条又一条指令去让计算机执行一些动作，这其中一般都会涉及到很多复杂的细节，而声明式就要优雅很多了，我们通过写表达式的方式来声明我们想干什么，而不是通过一步一步的指示。

```
// 命令式
let CEOS = [];
for (var i = 0; i < composes,length; i++) {
    CEOS.push(composes[i].CEO);
}
// 声明式
let CEOS = composes.map(c => c.CEO);
```
优缺点
函数式编程的一个明显的好处就是这种声明式的代码，对于无副作用的纯函数，我们完全可以不考虑函数内部是如何实现的，专注于编写业务代码，优化代码时，目光只需要集中这些稳定坚固的函数内部即可。
相反，不纯的函数式的代码会产生副作用或者依赖外部系统环境，使用他们的时候总是要考虑这些不干净的副作用。在复杂的系统中，这对于程序员的心智来说是极大的负担。

- 惰性求值

在指令式语言中以下代码会按顺序执行，由于每个函数都有可能改动或者依赖于其外部的状态，因此必须顺序执行。
```
function somewhatlongOperation1() ( somewhatlongOperation1);
```

比如ajax
```
function ajax() {
    var xhr = null;
    if (window.XMLHttpRequest){
        xhr = new XMLHttpRequest();
    } else {
        xhr = new ActiveXObject('Microsoft.XMLHTTP');
    }
    return xhr;
}
```

上面的代码每创建一个对象都会执行一次if或者else，如果页面有多个ajax会造成极大的浪费

可以改变函数体
```
function ajax() {
    var xhr = null;
    if (window.XMLHttpRequest){
        xhr = new XMLHttpRequest();
    } else {
        xhr = new ActiveXObject('Microsoft.XMLHTTP');
    }
    ajax = xhr; // 直接改变了函数体，这就是惰性函数
}
```

更加专业的术语
- 高阶函数
函数当参数，把传入的函数做一个封装，然后返回这个封装函数，达到更高程度的抽象。
```
// 命令式
var add = function(a, b) {
    return a + b;
}
function math(func, array) {
    return func(array[0], array[1])
}
math(add, [1 ,2]) // 3
```
- 尾调用优化
指函数内部的最后一个动作是函数调用，该调用的返回值，直接返回给函数，函数调用自身，称为递归。如果尾调用自身，就称为尾递归。递归需要保存大量的调用记录，很容易发生栈溢出错误。如果使用尾递归优化，将递归变为循环，那么只需要保存一个调用记录，这样就不会发生栈溢出错误了。
``
// 不是尾递归，无法优化，斐波那契数列
function factorial(n) {
    if (n === 1) return 1; 
    return n * factorial(n - 1);
}
function factorial(n, total) {
    if (n === 1) return total;
    return factorial(n - 1, n * total);
} // ES6强制使用尾递归
```
尾递归的判断标准是函数运行最后一步，是否调用自身，而不是 是否在函数的最后一行，调用自身，最后一行调用其它函数，并返回，叫做尾调用。
按道理尾递归调用栈永远都是更新当前的栈帧而已，这样就完全避免了爆栈的危险，但是现如今的浏览器并未完全支持，原因有二，在引擎层面消除递归是一个隐式的行为，程序员做不到；堆栈信息丢失了，开发者难以调试。
既然浏览器不支持我们可以吧这些递归写成while~

普通递归时，内存需要记录调用堆栈所处的深度和位置信息，在最底层计算返回值，在根据记录信息，跳回上一层级计算，然后再跳回更高一级，依次运行，直到最外层的调用函数，在cpu计算和内存会消耗很多，而且当深度过大时，会出现堆栈溢出。

尾递归
```
function sum(x, total) {
    if (x === 1) {
        return x + total;
    }
    return sum(x - 1, x + total);
}
sum(5, 0)
sum(4, 5);
sum(3, 9)
sum(2, 12)
sum(1, 14)
15
整个计算过程是线性的，调用一次sum(x, total)后，会进入下一个栈，相关的数据信息会跟随进入，不再放在堆栈上保存，当计算完最后的值之后，直接返回到最上层的sum(5, 0); 这能有效的防止堆栈溢出。
在ES6,我们将迎来尾递归优化，通过尾递归优化，js代码在解释成机器码的时候，将会向while看齐，也就是说，同时拥有数学表达能力和while的效能
```
浏览器没有实行尾调用优化，所以创建了多个sum，正常应该复用同一个sum，但是不方便开发者排查错误。上面的是尾递归，尾递归优化应该浏览器来做，但是没有做。

尾递归调用优化
```
function foo(n) {
    return bar(n * 2)'
}
function bar() {
    // 查看调用帧
    console.trace();
}
foo(1);
```
// 左侧代码的目标
// 只有一个执行栈
foo@ VM65:2
(anonymous) @ VM65:10
// 强制指定 只留下bar
return continue
!return
#function()
// 遗憾的是浏览器并未支持


- 闭包
如下例子，虽然外层的makePowerFn函数执行完毕，栈上的调用帧被释放，但是堆上的作用域并不被释放，因此power依旧可以被powerFn函数访问，这样就形成了闭包
闭包就是拿到了不该拿到的东西，但是这样说显得不专业，闭包应该是缓存了所在执行环境的词法作用域。
```
function makePowerFn(power) {
    // 词法作用域
    function powerFn(base) {
        return Math.pow(base, power);
    }
    return powerFn;
}

var square = makePowerFn(2);
square(3); // 9

```

- 容器，functor

1. 我们可以把范畴想象成是一个容器，里面包含两样东西，值，值的变性关系，也就是函数。
2. 范畴论使用函数，表达范畴之间的关系。
3. 伴随着范畴论的发展，就发展出一整套函数的运算方法。这套方法起初只用于数学运算，后来有人将它在计算机上实现了，就变成了今天的函数式变成。
4. 本质上，函数式编程只是范畴轮的运算方法，跟数理逻辑，微积分，行列式是同一类东西，都是数学方法，只是碰巧它能用来写程序。为什么函数式编程要求函数必须是纯的，不能有副作用？因为他是一种数学运算，原始目的就是求值，不做其他事情，否则就无法满足函数运算法则了。

范畴与容器

1. 函数不仅可以用于同一个范畴之中值的转换，还可以用于将一个范畴转成另一个范畴，这就涉及到了函子(functor)。
2. 函子是函数式编程里面最重要的数据类型，也是基本的运算单位和功能单位。它首先是一种范畴，也就是说，是一个容器，包含了值和变形关系。比较特殊的是，他的变性关系可以依次作用于每一个值，将当前容器变形成另一个容器。

容器，FUnctor(函子)

$(...)返回的对象并不是一个原生的DOM对象，而是对于原生对象的一种封装，这在某种意义上就是一个容器(但它并不是函数式)。
Functor(函子) 遵守一些特定规则的容器类型
Functor 是一个对于函数调用的抽象，我们赋予容器自己去调用函数的能力，把东西装进一个容器，只留出一个接口mao给容器外的函数，map是一个函数时，我们让容器自己来运行这个函数，这样容器就可以自由的选择何时何地如何操作这个函数，以致于拥有惰性求值，错误处理，异步调用等等非常牛掰的特性。

```
var Container = function(x) {
    this._value = x;
}

// 函数式编程一般约定，函子有一个of方法
Container.of = x => new Container(x);
// Container.of('abcd');
// 一般约定，函子的标志就是容器具有map方法，该方法将容器里面的每一个值，映射到另一个容器。
Container.prototype.map = function(f) {
    return Container.of(f(this._value));
}

Container.of(3)
.map(x => x + 1) // 结果Container(4);
.map(x => "result is " + x); 结果 Container('result is 4')
```
跟数学里面的，一堆数通过映射关系函，变成另外一堆数了。

ES6写法
```
class Functor {
    constructor(val) {
        this.val = val;
    }

    map(f) {
        return new Functor(f(this.val));
    }
}

(new Functor(2)),map(function(two) {
    return two + 2;
}); 一个函子，

// Functor(4); 另一个函子

```
map
上面的代码中，Functor是一个函子，它的map方法接受函数f作为参数，然后返回一个新的函子，里面包含的值是被f处理过的(f(this.val))。
一般约定，函子的标志就是容器具有map方法，该方法将容器里面的每一个值，映射到另一个容器。
上面的例子说明，函数式编程里面的运算，都是通过函子完成，即运算不直接针对值，而是针对这个值的容器---函子，函子本身具有对外接口(map方法)，各种函数就是运算符，通过接口接入容器，引发容器里面的值的变形。
因此，学习函数式编程，实际上就是学习函子的各种运算。由于可以把运算方法封装在函子里面，所以又衍生出各种不同类型的函子，有多少种运算，就有多少种函子。函数式编程就变成了运算不同的函子，解决实际问题。

of 方法
你可能注意到了，上面生成新的函子的时候，用了new命令，这实在太不像函数式编程了，因为new命令是面向对象编程的标志。
函数式编程一般约定，函子有一个of方法，用来生成新的容器
```
Functor.of = function(val) {
    return new Functor(val);
}
Functor.of(2).map(function(two) {
    return two + 2;
})
// Functor(4);
```

Maybe函子, 就是if else
数学里面有三元，但是没有if else
函子接受各种函数，处理容器内部的值。这里就有一个问题，容器内部的值可能是一个空值(比如 null)，而外部函数未必有处理空值的机制，如果传入空值，很可能就会出错。

```
Functor.of(null).map(function(s) {
    return s.toUpperCase();
});
// TypeError
class Maybe extends Functor {
    map(f) {
        return this.val ? Maybe.of(f(this.val)) : Maybe.of(null);
    }
}
Maybe.of(null).map(function(s) {
    return s.toUpperCase();
})
// Maybe(null)

var Maybe = function(x) {
    this._value = x;
}
Maybe.of = function(x) {
    return new Maybe(x);
}
Maybe.prototype.map = function(f) {
    return this.isNothing() ? Maybe.of(null) : Maybe.of(f(this._value));
}
Maybe.prototype.isNothing = function() {
    return (this._value === null || this._value === undefined);
}
// 新的容器我们称之为Maybe(原型来自于haskell);
```

- 错误处理，Either，AP
1. 我们的容器能做的事情太少了，try/catch/throw并不是纯的，因为他从外部接管了我们的函数，并且在这个函数出错时抛弃了他的返回值。
2. Promise是可以调用catch来集中处理错误的。
3. 事实上 Either并不只是用来做错误处理的，它表示了逻辑或，范畴学里的coproduc。

条件运算if...else 是最常见的运算之一，函数式编程里面，使用Either函子表达。Either函子内部有两个值: 左值和右值。右值是正常情况下使用的值，左值是右值不存在时使用的默认值。
```
class Either extends Functor {
    constructor(left, right) {
        this.left = left;
        this.right = right;
    }
    map(f) {
        return this.right ?
        Either.of(this.left, f(this.right));
        Either.of(f(this.left), this.right);
    }
}
Either.of = function(left, right) {
    return new Either(left, right);
}

var addOne = function(x) {
    return x + 1;
}
Either.of(5, 6).map(addOne);
// Either(5, 7);
Either.of(1, null).map(addOne);
// Either(2, null);
Either.of({address: 'xxx'}, currentUser.address).map(updateField);
```
错误处理，Either
```
var agetAge = user = user.age ? Right.of(user.age) : Left.of("ERROR!");
getAge({ name: 'stark', age: '21'}).map(age => age => 'Age is' + age);
// => Right('Age is 21');
getAge({ name: 'srark'}).map(age => 'Age is' + age);
// => Left('ERROR!')
```
Left可以让调用链中任意一环的错误立刻返回到调用链的尾部，这给我们错误处理带来了很大的方便，再也不用一层又一层的 try/catch

- AP函子
1. 函子里面包含的值，完全可能是函数。我们可以想象这样一种情况，一个函子的值是数值，另一个函子的值是函数。
```
class Ap extends Functor {
    ap(F) {
        return Ap.of(this.val(F.val));
    }
}
Ap.of(addTwo).ap(Functor.of(2));
```
- IO
1. 真正的程序总要去接出肮脏的世界。
```
function readLocalStorage() {
    return window.localStorage;
}
```
2. IO跟前面那几个Functor不同的地方在于，它的__value 是一个函数。他把不纯的操作(比如IO, 网络请求，DOM) 包裹到一个函数内，从而延迟这个操作的执行。所以我们认为，IO包含的是被包裹的惭怍的返回值。
3. IO其实也算是惰性求值。
4. IO负责了调用链积累了很多很多不纯的操作，带来的复杂性和不可维护性。
```
import _ from 'lodash';
var compose = _.flowRight;
var IO = function(f) {
    this.__value = f;
}
IO.of = x => new IO(__ => x);
IO.prototype.map = function(f) {
    return new IO(compose(f, this.__value));
}
```

```
import _ from 'loadsh';
var compose = _.flowRight;
class IO extends Monad {
    map(f) {
        return IO.of(compose(f, this.__value));
    }
}
```

IO函子
```
var fs = require('fs');
var readFile = function(filename) {
    return new IO(function() {
        return fs.readFileSync(filename, 'utf-8');
    });
};

readFile('./user.txt')
.flatMap(tail)
.flatMap(print)
// 等同于
readFile('./user.txt')
.chain(tail)
.chain(print)
```
- Monad
我们先后提到了Maybe，Either，IO这三种强大的Functor，在链式调用，惰性求值，错误捕获，输入输出中都发挥着巨大的作用。事实上Functor远不止这三种。
但依然有问题困扰着我们:
1. 如何处理嵌套的Functor呢？(比如Maybe(IO(42)))
2. 如何处理一个由非纯的或者异步的操作序列呢?

什么是Monad？
1. Monad就是一种设计模式，表示将一个运算过程，通过函数拆解成互相连接的多个步骤，你只要提供下一步运算所需的函数，整个运算就会自动进行下去。
2. Promise就是一种Monad
3. Monad让我们避开了嵌套地狱，可以轻松地进行深度嵌套的函数式编程，比如IO和其他异步任务。
4. 记得让上面的IO集成Monad

```
Maybe.of(
    Maybe.of(
        Maybe.of({ name: 'Mulburry', number: 8402})
    )
)
class Monad extends Functor {
    join() {
        return this.val;
    }
    flatMap(f) {
        return this.map(f).join();
    }
}
```
Monad函子的作用是，总是返回一个单层的函子，它有一个flatMap方法，与map方法作用相同，唯一的区别是如果生成了一个嵌套函子，他会取出后者内部的值，保证返回的永远是一个单层的容器，不会出现嵌套的情况。
如果函数f返回的是一个函子，那么this.map(f)就会生成一个嵌套的函子。所以，join方法保证了flatMap方法总是返回一个单层的函子。这意味着嵌套的函子会被铺平(flatten)。

```
var fs = require('fs');
import _ from 'loadsh';
var compose = _.flowRight;
class Monad extends Functor {
    join() {
        return this.__value;
    }
    flatMap(f) {
        return this.map(f).join();
    }
}

class IO extends Monad {
    constructor(value) {
        this.__value = value;
    }
    map(f) {
        return IO.of(compose(f, this.__value));
    }
}

var readFile = function(filename) {
    return new IO(function() {
        return fs.readFileSync(filename, 'utf-8');
    })
}

readFile('./user.txt')
.flatMap(tail)
.flatMap(print)
```
### 三. 当下函数式编程最热的库
rxjs 已经过时，因为大部分api浏览器已经实现了。
Rxjs从诞生以来一直都不温不火，但它函数响应式变成(Functional Reactive Programming, FRP)的理念非常先进，虽然或许对于大部分应用环境来说，外部输入事件并不是太频繁，并不需要引入一个如此庞大的FRP体系，但我们也可以了解一下它有哪些优秀的特性。
在Rxjs中，所有的外部输入(用户输入，网络请求等等) 都被视作一种 事件流:
用户点击了按钮 -> 网络请求成功 -> 用户键盘输入 -> 某个定时事件发生 -> 这种事件流特别适合处理游戏， 上上下下上上下下 举个简单的例子，下面这段代码会监听点击事件，每2次点击事件产生一次事件响应:
```
var clicks = Rx.Observable
.fromEvent(document, 'clcik')
bufferCount(2)
.subscribe(x => console.log(x)); // 打印出前2次点击事件。
```
Rxjs
响应式编程是继承自函数式编程，声明式的，不可变的，没有副作用的是函数式编程的三大护法。其中不可变武功最高深。一直使用面向对象范式编程的我们，习惯了用变量存储和追踪程序的状态。RxJS从函数式编程范式中借鉴了很多东西，比如链式函数调用，惰性求值等等。
在函数中与函数作用域之外的一切事物有交互的就产生了副作用。比如读写文件，在控制台打印语句，修改页面元素的css等等。在RxJS中，把副作用问题推给了订阅者来解决。
Cycle.js
Cyclejs是一个基于Rxjs的框架，它是一个彻彻底底的FRP理念的框架，和React一样支持VirtalDOM，JSX语法，但现在似乎还没有看到大型的应用经验。
本质的讲，他就是在Rxjs的基础上加入了对VirytualDOM，容器和组件的支持，比如下面就是一个简单的 开关 按钮。
```
function main(sources) {
    const sinks = {
        DOM: sources.DOM.select('input').events('click').map(ev => ev.target.checked).startWith(false).map(toggled => <div>
            <input type="checkbox" />Toogle me
            <p>{toggled ? 'NO' : 'off'}</p>
        </div>);
    }
    return sinks;
}
const drivers = {
    DOM: makeDOMDriver('#app')
}
run(main, dirvers);
```
Underscore.js
Underscore是一个JavaScript工具库，它提供了一整套函数式编程的实用功能，但是没有扩展任何JavaScript内置对象。他解决了这个问题: 如果我面对一个空白的HTML页面，并希望立即开始工作，我需要什么？ 他弥补了JQuery没有实现的功能，同时又是Backbone必不可少的部分。
Underscore提供了100多个函数，包括常用的 map，filter，invoke，当然还有更多专业的辅助函数，如: 函数绑定，JavaScript模板功能，创建快速索引，强类型相等测试等等。

Lodash.js
lodash是一个具有一致接口，模块化，高想能等特性的Javascript工具库，是underscose.js的fork，其最初目标也是一致的跨浏览器行为，并改善性能。
lodash采用延迟计算，意味着我们的链式方法在显示或隐式的value()调用之前是不会执行的。因此lodash可进行shortcut(捷径)，fusion(融合)这样的优化，通过合并链式大大降低迭代的次数，从而大大提升其执行性能。
就如同jQuery在全部函数前加全局的$一样，lodash使用全局的__来提供对工具的快速访问。

Ramdajs
ramda是一个非常优秀的js工具库，跟同类比更函数式主要体现在一下几个原则。
1. ramda里面的提供的函数全部都是curry的，意味着函数没有默认参数可选参数从而减轻认知函数的难度。
2. ramda推崇pointfree简单的说是使用简单函数组合实现一个复杂功能，而不是单独写一个函数操作临时变量。
3. ramda有个非常好用的参数占位符R._，大大减轻了函数在pointfree过程中参数位置的问题。
相比undersorce/lodash感觉要干净很多。

### 四. 函数式编程的实际应用场景
易调试，热部署，并发
单元测试

总结与补充
我们本节课介绍了纯函数，柯里化，PintFree，声明式代码和命令式代码的区别，只要记住 函数对于外部状态的依赖是造成西永复杂性大大提高的主要原因 以及 让函数尽可能地纯净 就行了。
然后介绍了容器的概念和Maybe，Either，IO这三个强大的Functor。是的，大多数人或许都没有机会在生产环境中自己取实现这样的玩具级Functor，但通过了解他们的特性会让你产生对于函数式编程的意识。
软件工程上讲，没有银弹，函数式编程同样也不是万能的。他与烂大街的OOP一样，只是一种编程范式而已，很多实际应用中是很难用函数式去表达的。选择OOP亦或是其他编程范式或许会更简单，但我们要注意到函数式编程的核心理念，如果说OOP降低复杂度是靠良好的封装，继承，多态及接口定义的话，那么函数式编程就是通过纯函数以及他们的组合，柯里化，Functor等技术来降低系统复杂度。而React，Rxjs，Cycle.js正是这种理念的代言。让我们一起拥抱函数式编程，打开你程序的大门！