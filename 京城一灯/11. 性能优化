为什么要进行性能优化
1. 57%的用户更在乎网页在3秒内是否完成加载
2. 52%的在线用户认为网页打开速度影响到他们对网站的忠实度
3. 每慢1秒造成页面PV降低11%，用户满意度也随之降低16%
4. 近半数移动用户因为在10秒内仍为打开页面从而放弃。

## 性能优化学徒工
html数量控制
html css hint 善用css
压缩，合并，开启gzip
页面有多个cdn， http1.1有用，其他协议无用
文件MD5，善用缓存。
keep-alive http2
雅虎军规
离线缓存，localStroge sessionStorge；

多个cdn
资源单独域名存储，是为了cookie不携带。否则页面数据太多。

expires 和 cache-control 一般关闭，只配置一个etag
一般expires 和 cache-control用在公用库上。业务代码一般不开启。业务代码使用Etag就可以了。

缓存优先级

cache-control

expires

etag

last-modified, 请求头，if-modifed-since, 

可将js文件放入离线缓存，localStroge 中，通过eval执行。一般针对库。或者配合hash至使用。

## 渲染中的性能优化

1. 重绘和重排 网页整体渲染过程
1.1 获取dom分隔层
1.2 根据每层节点结算样式结果Recalculate Style
1.3 为每个节点生成图形和位置 Layout
1.4 将每个节点绘制成到当前的图层位图中 Paint
1.5 将图层上传到gpu gpu bitmap 专门处理图像
1.6 根据符合要求的多个图层合并生成图像，Composite Layers 效果呈现

总结渲染阶段: Layout -》 Paint -》 Composie Layers

什么情况下分层

跟元素，position，transfrom，半透明，滤镜，canvas，video，overflow

gpu直接参与
css3d, video, webgl, transform, 滤镜  统称为硬件加速




## 页面加载的性能优化
## NodeJS性能优化



