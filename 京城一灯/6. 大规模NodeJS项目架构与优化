Reaktor Hello World
卫星搭载Node。Node已经很成熟了。不用纠结什么问题。

异步IO的好处
前端通过异步IO消除UI阻塞。
同步请求消耗时间累计
随着业务的复杂，会引入分布式系统，时间会线性的增加。
IO是昂贵的，分布式IO是更加昂贵的
NodeJS适用于IO密集型不使用CPU密集型。

操作系统对计算机进行了抽象，将所有输入输出抽象为文件，内核在进行文件IO操作时，通过文件操作符进行管理，应用程序如果进行一步IO需要打开文件描述符，进行文件数据的读写，异步IO不带数据直接返回，要获取数据，还需要通过文件描述符再次读取。

Node对异步的实现：完美的异步IO应该是应用程序发起非阻塞调用，无需通过遍历或者事件循环等方式轮询。

Node的EventLoop依赖LIBUV

V8垃圾回收机制
Node使用js在服务端操作大内存对象受到一定得限制(堆区)。64位系统下约为1.4GB, 32位操作系统下是0.7GB, 栈区新生代64位是32M， 32位是16M
V8的垃圾回收策略主要基于分代式垃圾回收机制，在自动垃圾回收的演变过程中，人们发现没有一种垃圾回收算法能够胜任所有场景。V8中内存分为新生代和老生代两代，新生代为存活周期短的对象，老生代中为存活时间较长的对象。
一句话表示：小孩子尽管玩，到处丢东西大人回收。