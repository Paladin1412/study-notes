安卓是基于Linux内核的开放源代码移动操作系统，主要设计用于触屏移动设备如智能手机和平板电脑

android碎片化问题
- 源代码可自由修改
- 众多设备繁杂
- 系统版本各异
- 分辨率不一致

android分支
android wear
针对手表
android tv
针对电视
android auto
针对汽车

### 下载android studio

https://developer.android.google.cn/studio/

### 设置

欢迎页面

- start a new android studio project
- open an existing android studio project
- check out project from version control
- import project(Eclipse ADT, Gradle, etc)
- import an android code sample

右下角有配置

SDK manager
plugins
check for update

选择第一项，start a new android
添加名字(不要用中文)
添加包名 madaozhijian.com
c++支持默认不勾选
选择创建目录

点击下一步

选择所要适配的版本

默认选中phon and tablet
SDK 选中 android最低适配版本，比如14:4.0

点击下一步

选择展示的默认页面
初学者选择Empty Activity

下一步

填写入口函数名字
MainActivity
Layout，随便填写。

完成，即可！

### 模块
file -> new - new module

选择位置可以切换模块。

### 配置

1. 工具栏 最后第三个，(Project Structure), 点击

SDK路径选择，选择SDK路径和JDK路径，不需要勾选。
app -> signing(签名, 不需要填写)-> flavors(切换sdk版本，不需要修改)

### 发布apk

build -> generate signed Apk -> 选择module(app) -> create new 签名文件(选择位置，填写名字，添加密码，alias：秘钥名称，密码，有效时间25年) 下一步 -> 选择输出路径，build类型，debug还是release -> 完成

### 使用IOS模拟器

页面左上角切换模拟器

herdWare：控制翻转。

### 在真机上运行应用

需要购买苹果的开发者证书

ios dev center

链接手机

设备目标上出现真机，选中。

手机操作系统版本和开发版本目标一致，或者比真机低。

点击左侧三角符号，添加id，输入密码
id必须为购买了开发者证书的id

window -> origin - 设备 -> 截图之类。

### 发布appstore
归档
product -> archive
选中iso点击distribute(发行),
苹果一般审核一周，审核通过就可以上线啦。

### RN开发环境搭建

环境依赖：OSX， Xcode，Node
OSX系统，以前不支持安卓系统，所以只能用OSX开发，现在已经支持了。和android studio一样
Xcode，在App Store下载最新版本的Xcode

依赖文件
- node
- watchman
npm install watchman -g
监听文件变化
- flow
npm install flow -g
检测jsx语法
- react-navtie-cli

使用方式
```
npm install watchman -g

npm install flow -g

npm install react-native-cli -g

react-native init ydapp

react-native run-ios/open ydtest.xcodeproj 启动ios模拟器

// react-native run-android
```

模拟器需要在xcode里面配置

### 开发

方式一：
进入到ios文件夹
open myapp.xcodeproj 启动ide

方式二：
直接开发

安卓问题，设置模拟器-菜单栏倒数第三个

参考官网

#### 开发依赖的一些框架
react-native-navigator-router：切换路由，性能比自带的好
react-native-elements
react-native-vector-icons
react-native-router-flux：切换路由，性能比自带的好
react-native-animatable
react-native-ignite
react-native-wechat
react-native-sound
react-native-gifted-messenger
react-native-image-picker
react-native-yunpeng-alipay

常用的性能优化的点
1. 异步逐层渲染，使用requestAnimationFrame或Timeout定时将单个组件push进ScrollView容器，react-progressive
2. shouldComponentUpdate
3. 直接修改State使用requestAnimationFrame(fn), 使用setNativeProps方法可以理解为web的直接修改dom，性能分析工具React.addons.Perf
4. 区分动态组件和静态组件，最小化结构
5. 最小化ListView 子选项不可见的时候减小list（react-native-sglistview, CRNlistView）


Native优缺点
优点:
用户体验极佳
接口完备
什么都可以做

H5的优缺点
优点:
代码跨平台
开发效率高
发版灵活

缺点:
用户体验不如原生
优化成本较高

缺点
不能跨平台，一套逻辑，两套代码
开发/测试成本高
Coding -> 编译 -> 打包 -> 测试 -> Coding
开发效率一般
版本发布不灵活，受应用市场限制，频繁发版影响用户体验

混合式开发
web的开发体验，Native的用户体验
代码保存即生效，不用等待漫长的编译打包过程
组件化复用率高
版本发布灵活，使用增量升级流量超小，用户无感知

不足:
web需要单独开发，适用五web或弱web的项目
用户体验扔没有达到原生效果，单线程js控制的动效有时会有轻微掉帧
样式无选择器概念，写起来较为臃肿

更新(增量算法) bundle
1. 计算增量包
新版本10 - 旧版本 1 -9 = 增量包
会有九个包
2. app根据自己的当前版本下载对应的增量包
3. app种通过 旧版本 + 增量包 = 新版本，计算出新版本的全量包

ReactNative 发布 bundle
1. react-native bundle --entry-file demo/index.js --bundle-output ./ios/bundle/index.ios.jsbundle --platform ios --asset-dest ./ios/bundle --dev false
2. jsCodeLocation = [[NSBundle mainBundle]
URLForResource:@"index.ios"
withExtension:@"jsbundle"];

上线
- 原生代码部分，oc或者java代码
- jsbundle文件
- 图片资源

完整上线
- google-diff-match-patch 不过个别时候会造成安卓内存爆满，不推荐使用
- bsdiff 生成差异
- bspath 合并差异

app升级流程
app检验是否有升级，下载增量包，校验MD5，解压，升级，校验新的md5，完成升级, 下次打开使用。

微软提供下面的库提供热更新
react-native-code-push
携程开发的帮助拆分bundle
moles-packer

### Cordova

一个移动开发框架.
将HTML,CSS,JS封装成原生APP(Hybrid);
来自Adobe的PhoneGap产品
是Apache的顶级开源项目
组件化，复用率高
测试效率高，业务逻辑一套代码
跨平台，代码一致性95%以上

优点
跨平台，利于移植
能利用HTML5的各种特效
开发快速，成本低

缺点
不能使用设备的所有特性
执行速度慢
不像原生应用，与系统不协调
一次编写，处处调试

安装：
1. 安装node
2. 安装
npm install -g cordova
3. 安装java jdk


4. 安装android SDK

注意环境变量检查。

使用：
```

sudo cordova create hello com.example.hello

cd hello

sudo cordova platform add android

sudo cordova build

sudo cordova run
```

项目目录
config.xml 核心配置信息
hook: 自定义扩展功能
platform: 添加的运行时，例如andriod ios等
plugins: 引入的插件
www: 开发目录

### js跨硬件和PC

Arduino是一款便捷灵活、方便上手的开源电子原型平台。包含硬件（各种型号的Arduino板）和软件（ArduinoIDE)。由一个欧洲开发团队于2005年冬季开发。其成员包括Massimo Banzi、David Cuartielles、Tom Igoe、Gianluca Martino、David Mellis和Nicholas Zambetti等。

它构建于开放原始码simple I/O介面版，并且具有使用类似Java、C语言的Processing/Wiring开发环境。主要包含两个的部分：硬件部分是可以用来做电路连接的Arduino电路板；另外一个则是Arduino IDE，你的计算机中的程序开发环境。你只要在IDE中编写程序代码，将程序上传到Arduino电路板后，程序便会告诉Arduino电路板要做些什么了。

Arduino能通过各种各样的传感器来感知环境，通过控制灯光、马达和其他的装置来反馈、影响环境。板子上的微控制器可以通过Arduino的编程语言来编写程序，编译成二进制文件，烧录进微控制器。对Arduino的编程是通过 Arduino编程语言 (基于 Wiring)和Arduino开发环境(基于 Processing)来实现的。基于Arduino的项目，可以只包含Arduino，也可以包含Arduino和其他一些在PC上运行的软件，他们之间进行通信 (比如 Flash, Processing, MaxMSP)来实现。

- node的串行端口
串行接口是指数据一位一位的顺序传送，其特点是通信线路简单，只要一对传输线就可以实现双向通信
选择正确的电路板
serialport Node串行端口

```
const SerialPort = require('serialport');
const port = new SerialPort('/dev/tty-usbserial1');

port.on('open', () => {
    port.write('main screen turn on', function(err) {
        if (err) {
            return console.log('Error on write' + err.message);
        }
        console.log('message written');
    })
})
```

- firmata协议
Firmata是一个PC与MCU通讯的一个常用协议。其遵旨是能与任何主机PC软件包兼容。到目前为止，已经得到不少语言的支持，这样可方便地将对协议的支持加入软件系统中。Firmata起初是针对于PC与Arduino通讯的固件(Firmware)，其目标是让开发者可以通过PC软件完全地控件Arduino。

链接电路板，找到对应的串行端口，安装 Firmata 固件。

npm install firmata

```
const Board = require('firmata');
const board = new Board('path to serialport');

board.on('ready', () => {

})
```

上面太麻烦，可以用Johnny-Five
Johnny-Five

npm install johnny-five;

```
var five = require('johnny-five');
var board = new five.Board();
board.on('ready', function() {
    var led = new five.Led(13); 亮13秒
    led.blink(500); // 闪500下
})
```

NodeBot

js + 螺丝 = 机器人

使用谷歌查询

- ruff初体验

Ruff是一个JavaScript运行时环境，专为硬件开发而设计。它对硬件进行了抽象，使用了基于事件驱动、异步I/O的模型，使硬件开发变得轻量而且高效。除了使用JavaScript作为开发语言，它还拥有自己的软件仓库，从模块到驱动一应俱全。提高软件兼容性、降低硬件开发门槛。

下载SDK,升级固件rap。
export RUFF_HOME = /path/to/ruff-sdk
export PATH = "$PATH:$RUFF_HOME/bin"
rap system upgrade --hostname 192.168.1.30 ~/Downloads/ruffos-080.bin

- 创建项目 
cd hello-ruff 
rap init 链接设备 
rap wifi
- jq一样的体验
$('#led-r').turnOn();
- rap deploy -s rap stop
- rap device add 硬件id 同时可以通过rap log监听输出日志。
新增元件要执行添加命令

ruff.io

### JS开发VR
使用Nodejs来读取Oculus(设备)上的传感器数据，将这些数据用websocket协议来提供一个服务
寻找一个3D游戏引擎，如Three.js来创建一个3D世界。
读取传感器的值将其表示在3D世界中。

